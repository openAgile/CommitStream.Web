(function() {
  var handlebarsUrl = '//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.4/handlebars.amd.min',
    requirejsUrl = '//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.14/require.min.js',
    validatorUrl = '//cdnjs.cloudflare.com/ajax/libs/validator/7.0.0/validator',
    commitStreamDomId,
    instanceId,
    digestId,
    workitem,
    getAssetAndChildNumbersUrl,
    apiKey,
    errorHandler,
    commitsContainerTmpl,
    commitsListTmpl,
    autoRefreshIntervalId,
    showChildrenChecked,
    assetNumbers,
    mentionUrl,
    handlebars,
    validator;

  var clone = function(source) {
    return JSON.parse(JSON.stringify(source));
  };

  var escapeUnsafeContent = function(model) {
    for (var i = 0; i < model.commits.length; i++) {
      var commit = model.commits[i];
      var processedMessage = handlebars.default.Utils.escapeExpression(commit.message);
      commit.message = processedMessage;
    }
  };

  var commitsListModelPreprocessorPlugins = [
    function CareerBuilder_open_mentions_in_new_window(context, model) {
      for (var i = 0; i < model.commits.length; i++) {
          var commit = model.commits[i];
          var processedMessage = commit.message.replace(context.assetMentionPattern, function(match, p1) {
          var mentionUrlWithReplacement = mentionUrl.replace("\{\{mention\}\}", p1);
          return linkOrTextForAssetNumber(mentionUrlWithReplacement, match);
        });
        commit.message = processedMessage;
      }
    }
  ];

  function linkOrTextForAssetNumber(urlForAsset, assetNumber){
    var linkToAsset = '<a href="' + urlForAsset + '" target="_blank">' + assetNumber + '</a>';
    return validator.isURL(urlForAsset) ? linkToAsset : assetNumber;
  }

  var commitsListModelPreprocessorPluginContext = {
    assetMentionPattern: new RegExp('([A-Z,a-z]{1,2}-[0-9]{5,})', 'g')
  };

  var processCommitsListPreprocessorPlugins = function(model) {
    if (!mentionUrl) return;

    for (var i = 0; i < commitsListModelPreprocessorPlugins.length; i++) {
      var plugin = commitsListModelPreprocessorPlugins[i];
      plugin(commitsListModelPreprocessorPluginContext, model);
    }
  };

  var configureCommitStreamDependencies = function() {
    require.config({
      paths: {
        handlebars: handlebarsUrl,
        validator: validatorUrl
      }
    });
  };

  var deps = ['handlebars', 'validator'];

  var hasAllDeps = function() {
    if (!window.requirejs) return false;
    for (var i = 0; i < deps.length; i++) {
      if (!requirejs.defined(deps[i])) return false;
    }
    return true;
  };

  var bindShowChildrenAction = function() {
    var el = $(commitStreamDomId);
    el.find('.toggle-cs-childrenasset').bind('click', function() {
      showChildrenChecked = $(this).is(':checked');
      if (showChildrenChecked) {
        queryCommitStream(getQueryWithChildrenUrl(), queryCallback);
      } else {
        queryCommitStream(getUrlToQuery(), queryCallback);
      }
    });   
  };

  var bindRefreshActions = function() {
    var el = $(commitStreamDomId);
    el.find('.cs-refresh').unbind('click');
    el.find('.cs-refresh').bind('click', queryCommitStreamRefresh);
    el.find('.toggle-cs-autorefresh').unbind('click');
    el.find('.toggle-cs-autorefresh').bind('click', autoRefreshToggle);
    if (autoRefreshIntervalId) {
      el.find('.toggle-cs-autorefresh').prop('checked', true);
    }
  };

  var setStreamContent = function(model) {
    var content = commitsContainerTmpl(model);
    $(commitStreamDomId).html(content);
  };

  var renderCommitsContainer = function(model) {
    try {
      var modelCopy = clone(model);
      if (!commitsContainerTmpl) {
        getCompiledTemplate('commitsList.html', function(tmpl) {
          commitsListTmpl = tmpl;
          registerPartial('commitsList', tmpl, function() {
            getCompiledTemplate('commitsContainer.html', function(tmpl) {
              commitsContainerTmpl = tmpl;
              escapeUnsafeContent(modelCopy);
              processCommitsListPreprocessorPlugins(modelCopy);
              setStreamContent(modelCopy);
              checkIfNextPage(model);
              bindRefreshActions();
              bindShowChildrenAction();
            });
          });
        });
      } else {
        escapeUnsafeContent(modelCopy);
        processCommitsListPreprocessorPlugins(modelCopy);
        setStreamContent(modelCopy);
        checkIfNextPage(model);
        bindRefreshActions();
        bindShowChildrenAction();
      }
    } catch (ex) {
      errorHandler();
      $('.overlay').hide();      
    }    
  };

  var renderCommitsList = function(model) {
    var modelCopy = clone(model);
    try {
      if (!commitsListTmpl) {
        getCompiledTemplate('commitsList.html', function(tmpl) {
          commitsListTmpl = tmpl;
          escapeUnsafeContent(modelCopy);
          processCommitsListPreprocessorPlugins(modelCopy);
          var content = tmpl(modelCopy);
          $(commitStreamDomId).find('.side-panel-scrollable').append(content);
          checkIfNextPage(model);            
        });
      } else {
        escapeUnsafeContent(modelCopy);
        processCommitsListPreprocessorPlugins(modelCopy);
        var content = commitsListTmpl(modelCopy);
        $(commitStreamDomId).find('.side-panel-scrollable').append(content);
        checkIfNextPage(model);        
      }
    } catch (ex) {
      errorHandler();      
    }
  };

  var compileSource = function(source, cb) {
    require(deps, function(handlebarsDep, validatorDep) {
      handlebars = handlebarsDep;
      validator = validatorDep;
      cb(handlebarsDep.default.compile(source));
    }, errorHandler);
  };

  var registerPartial = function(partialName, template, cb) {
    require(deps, function(handlebars, validatorDep) {
      validator = validatorDep;
      handlebars.default.registerPartial(partialName, template);
      cb();
    }, errorHandler);
  };

  var getTemplate = function(template, cb) {
    var tmplUrl = '{{{resourcePath}}}' + template;
    $.get(tmplUrl).done(cb).fail(errorHandler);
  };

  var getCompiledTemplate = function(template, cb) {
    getTemplate(template, function(source) {
      compileSource(source, cb);
    });
  };

  var configureModel = function(model) {
    model.noCommits = model.commits.length < 1;
    model.protocol = '{{{protocol}}}';
    model.resourcePath = '{{{resourcePath}}}';
    model.lastPage = false;
    model.showChildrenChecked = showChildrenChecked;
    if (!model._links || !model._links.next) {
      model.lastPage = true;
    }
  };

  var checkIfNextPage = function(model) {
    if (!model._links || !model._links.next) {
      $(commitStreamDomId).find('.side-panel-scrollable').attr('next', '');
      $(commitStreamDomId).find('.side-panel-scrollable').unbind('scroll');
    } else {
      $(commitStreamDomId).find('.side-panel-scrollable').attr('next', model._links.next);
      $(commitStreamDomId).find('.side-panel-scrollable').unbind('scroll');
      bindScrollEvent();
    }          
    $('.overlay').hide();    
  };

  var thereAreNoCommits = function(model) {
    return (!model || !model.commits);
  };

  var isEndOfScrollbar = function(el) {
    return (el.scrollTop() + el.innerHeight() >= el[0].scrollHeight);
  };

  var bindScrollEvent = function() {
    $(commitStreamDomId).find('.side-panel-scrollable').unbind('scroll');
    $(commitStreamDomId).find('.side-panel-scrollable').on('scroll', function() {
      if (isEndOfScrollbar($(this))) {
        queryCommitStream(getUrlToQuery(), function(model) {
          if (thereAreNoCommits(model)) {
            errorHandler();
          } else {
            configureModel(model);
            renderCommitsList(model);
          }
        });
      }
    });
  };

  var autoRefreshToggle = function() {
    var toggle = $(this);
    if (toggle.is(':checked')) {
      autoRefreshEnable();
    } else {
      autoRefreshDisable();
    }
  };

  var autoRefreshEnable = function() {
    if (autoRefreshIntervalId) {
      clearInterval(autoRefreshIntervalId);
    }
    autoRefreshIntervalId = setInterval(queryCommitStreamRefresh,
      window.CommitStream.autoRefreshIntervalInSeconds * 1000);
  };

  var autoRefreshDisable = function() {
    if (autoRefreshIntervalId) {
      clearInterval(autoRefreshIntervalId);
      autoRefreshIntervalId = undefined;
    }
  };

  var setCheckboxVisibility = function(model) {
    if (digestId) {
      model.showAutoRefreshCheckbox = true;
    }
  };

  var setChildrenCheckboxVisibility = function(model) {
    if ({{{showChildrenFeatureToggle}}} && getAssetAndChildNumbersUrl) {
      model.showChildrenCheckbox = true;
    }
  };

  var getUrlToQuery = function() {
    showChildrenChecked = false;
    if ($(commitStreamDomId).find('.side-panel-scrollable').attr('next')) {
      return $(commitStreamDomId).find('.side-panel-scrollable').attr('next');
    } else if (workitem || digestId) {
      var url = '{{{apiUrl}}}' + instanceId;
      var prefix = '&';
      if (digestId !== null && digestId !== undefined) {
        url += '/digests/' + digestId + '/commits';
        prefix = '?';
      } else {
        url += '/commits/tags/versionone/workitem?numbers=' + workitem;
      }

      url += prefix + 'apiKey=' + apiKey;
      return url;
    } else {
      throw 'Must specify either workitem or digestId as a URL query parameter in order to query CommitStream';
    }
  };

  var getQueryWithChildrenUrl = function() {
    var url = '{{{apiUrl}}}';
    url += instanceId;
    url += '/commits/tags/versionone/workitem?numbers=';
    url += assetNumbers ? assetNumbers.join() : '';
    url += '&apiKey=';
    url += apiKey;
    return url;
  };

  var queryCommitStream = function(apiUrl, cb) {
    var el = $(commitStreamDomId);
    $('.overlay').show();    
    el.find('.cs-refresh').addClass('requesting');
    $.getJSON(apiUrl).done(function(model) {
      el.find('.cs-refresh').removeClass('requesting');      
      cb(model);        
      }).fail(function(errorHandler) {        
    });
  };

  var queryCallback = function(model) {
    if (thereAreNoCommits(model)) {
      errorHandler();
    } else {
      configureModel(model);
      setCheckboxVisibility(model);
      setChildrenCheckboxVisibility(model);
      renderCommitsContainer(model);
    }    
  };

  var queryCommitStreamRefresh = function() {
    $(commitStreamDomId).find('.side-panel-scrollable').attr('next', '');
    queryCommitStream(getUrlToQuery(), queryCallback);
  };

  var getAssetNumbers = function(url) {
    return $.get(url).done(function(assetNumbers) {
      return assetNumbers;
    }).fail(errorHandler);
  };

  var clearChunckDataTemplate = function() {
    if (commitsContainerTmpl) {
      var model = {
        noCommits: false,
        lastPage: false,
        showChildrenChecked: false,
        protocol: '{{{protocol}}}',
        resourcePath: '{{{resourcePath}}}'
      };
      setStreamContent(model);
    }
  };

  var init = function() {
    var url = getUrlToQuery();
    if (!hasAllDeps()) {
      $.getScript(requirejsUrl, function(model, status, jqxhr) {
        configureCommitStreamDependencies();
        queryCommitStream(url, queryCallback);
      }).fail(errorHandler);
    } else {
      queryCommitStream(url, queryCallback);
    }
  };

  // Put a commitStream object in the global space
  if (!window.CommitStream) {
    window.CommitStream = {
      commitsDisplay: function(csDomId,
        wi,
        eh,
        dId,
        iId,
        aKey,
        assetAndChildUrl,
        mentionDetailUrlTemplate) {

        clearChunckDataTemplate();
        commitStreamDomId = csDomId;
        workitem = wi;
        errorHandler = eh;
        digestId = dId;
        instanceId = iId;
        apiKey = aKey;
        getAssetAndChildNumbersUrl = assetAndChildUrl;
        mentionUrl = mentionDetailUrlTemplate;       

        try {
          if (getAssetAndChildNumbersUrl) {
            getAssetNumbers(getAssetAndChildNumbersUrl)
              .then(function(c) {
                assetNumbers = c.assetNumbers;
              })
              .then(init);
          } else {
            init();
          }
        } catch (ex) {
          if (console && console.log) {
            console.log(ex);
          }
        }
      }
    };
    window.CommitStream.autoRefreshIntervalInSeconds = 30;
  }
})();
