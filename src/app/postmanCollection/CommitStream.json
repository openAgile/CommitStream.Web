{
	"version": 1,
	"collections": [
		{
			"id": "078e1998-9164-d802-84db-3387328fe19f",
			"name": "CommitStream",
			"description": "",
			"order": [],
			"folders": [
				{
					"id": "fdd97ecd-cfec-024a-7100-8ea16e442075",
					"name": "CSV",
					"description": "",
					"write": true,
					"order": [
						"bdcae0e3-e7c0-525e-5826-5afd5ef62abc",
						"f5f8b4fc-eff3-be34-345b-956e57ab9696",
						"7d71f7da-3e2e-8ff4-a3f3-0c046ed353f8",
						"4dc3d416-3ad8-9329-81ce-4300edb6faa2",
						"88f233df-697f-1cd7-4b68-de9f3710461f",
						"b450a087-159d-63a0-94b2-abe45ce0578a",
						"fb7c1689-6a0e-6c37-a6cf-64b77e861d49",
						"f4b04476-f205-6efb-946f-403a9dc2e707",
						"5a68883f-ddf1-6909-d4ed-68bb5cee1f14",
						"dd846cb9-8a6f-f39b-34af-c037b020a2a1",
						"c16ba3db-7f50-c174-fade-b49c880ceed8",
						"6beba802-da8c-5e60-0960-6137d23631f2",
						"411ca69c-50f1-db64-b33c-a82302598680",
						"fdc1dcd8-3a9f-e714-d2b8-1aa2f7952759",
						"825befed-09b2-187e-fccf-41ae125116e0",
						"1c4a97aa-aed4-40d1-2fe7-d1172f0f8bf8",
						"5ad41eed-30d3-b52c-ee56-1ecbfecc4c20",
						"222fbde0-dfa7-f7fe-40ab-cfb4892271c0",
						"11035ed7-8f10-f2f7-177d-888e877ab7fd"
					],
					"collection_name": "CommitStream",
					"collection_owner": 0,
					"collection_id": "078e1998-9164-d802-84db-3387328fe19f",
					"collection": "078e1998-9164-d802-84db-3387328fe19f",
					"owner": 0,
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f"
				},
				{
					"id": "8c9c3b96-c523-576e-db80-690dedf973e4",
					"name": "Commits",
					"description": "",
					"write": true,
					"order": [
						"65705602-9cc4-0be1-cbcf-3036b3463957",
						"567129fb-c3a2-6728-7902-a73dab80df02",
						"8e0a01a6-4068-1d24-6f30-eea4810e89ab"
					],
					"collection_name": "CommitStream",
					"collection_owner": 0,
					"collection_id": "078e1998-9164-d802-84db-3387328fe19f",
					"collection": "078e1998-9164-d802-84db-3387328fe19f",
					"owner": 0
				},
				{
					"id": "190f176e-2c29-3610-a706-7773f35d20d2",
					"name": "Digest",
					"description": "",
					"write": true,
					"order": [
						"7a3a9efe-e6c4-ebf5-a0c2-6046ae4e5400",
						"64e24d5e-0e25-472f-7416-f90997cd8c99",
						"a5b63b74-716f-280d-e2cb-003e4d098fef",
						"b7ce7098-23e1-0fa8-b40f-7cc04c094430",
						"f4fbed3e-2809-eb23-a60d-28469fc302de",
						"c7537742-8132-504b-25c5-2ebdcd9a8107",
						"be7ce4eb-d361-98a8-c257-75612b25c831"
					],
					"collection_name": "CommitStream",
					"collection_owner": 0,
					"collection_id": "078e1998-9164-d802-84db-3387328fe19f",
					"collection": "078e1998-9164-d802-84db-3387328fe19f",
					"owner": 0,
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f"
				},
				{
					"id": "c51dd647-b2bc-6fbb-5586-82513c554e60",
					"name": "Inboxes",
					"description": "",
					"write": true,
					"order": [
						"4e9720ad-6df5-4643-a10a-01a09f0e2c76",
						"3241724c-f27b-f24b-e0ef-435aca8eef8b",
						"15a86c38-d605-71eb-6fdb-117183546ae4",
						"c1c7d722-f1eb-7029-aa2c-45c37a9b23cb"
					],
					"collection_name": "CommitStream",
					"collection_owner": 0,
					"collection_id": "078e1998-9164-d802-84db-3387328fe19f",
					"collection": "078e1998-9164-d802-84db-3387328fe19f",
					"owner": 0,
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f"
				},
				{
					"id": "bc8836c9-b43c-e8da-db41-3bfd310851f1",
					"name": "Instance",
					"description": "",
					"write": true,
					"order": [
						"0e9cf7f6-d3b8-8d47-58c1-0fccaa134a82",
						"e081fd2b-c83d-fddc-739e-27bb54296a8c"
					],
					"collection_name": "CommitStream",
					"collection_owner": 0,
					"collection_id": "078e1998-9164-d802-84db-3387328fe19f",
					"collection": "078e1998-9164-d802-84db-3387328fe19f",
					"owner": 0
				},
				{
					"id": "c114730a-5f6a-1b32-75bc-0643232eb37d",
					"name": "Sad apiKey-instanceId",
					"description": "",
					"write": true,
					"order": [
						"5763cfeb-b104-60eb-17ad-95000c835b48"
					],
					"collection_name": "CommitStream",
					"collection_owner": 0,
					"collection_id": "078e1998-9164-d802-84db-3387328fe19f",
					"collection": "078e1998-9164-d802-84db-3387328fe19f",
					"owner": 0
				},
				{
					"id": "565c5173-892c-0f50-9a1d-2aac884ef141",
					"name": "hack",
					"description": "",
					"write": true,
					"order": [],
					"collection_name": "CommitStream",
					"collection_owner": 0,
					"collection_id": "078e1998-9164-d802-84db-3387328fe19f",
					"owner": 0
				}
			],
			"timestamp": 1428422920112,
			"synced": false,
			"remote_id": 0,
			"owner": 0,
			"sharedWithTeam": false,
			"subscribed": false,
			"remoteLink": "https://www.getpostman.com/collections/a17c44a631a562df06df",
			"public": false,
			"write": true,
			"hasRequests": true,
			"requests": [
				{
					"id": "0e9cf7f6-d3b8-8d47-58c1-0fccaa134a82",
					"headers": "",
					"url": "{{rootURL}}/instances?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable(\"apiKey\", null);\npostman.setGlobalVariable(\"instanceId\", null);",
					"pathVariables": {},
					"method": "POST",
					"data": "",
					"dataMode": "raw",
					"version": 2,
					"tests": "if(responseCode.code === 201){\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable(\"apiKey\", responseData.apiKey);\npostman.setGlobalVariable(\"instanceId\", responseData.instanceId);\n\nvar apiKey = postman.getGlobalVariable('apiKey');\nvar instanceId = postman.getGlobalVariable('instanceId');\nvar expected = {\n    \"_links\":{\n        \"self\":{\n            \"href\": \"http://localhost:6565/api/instances/\" + instanceId\n        },\n        \"digests\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n        },\n        \"digest-create\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\",\n            \"method\": \"POST\",\n            \"title\": \"Endpoint for creating a digest on instance \" + instanceId + \".\"\n        }\n    },\n    \"instanceId\": instanceId,\n    \"apiKey\": apiKey\n    };\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\ntests[\"Create Instance Response Header is correct \" + postman.getGlobalVariable(\"responseHeaderContentType\")] = postman.getResponseHeader(\"Content-Type\").startsWith(postman.getGlobalVariable(\"responseHeaderContentType\"));\ntests[\"Create Instance Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/instances/\" + instanceId);\ntests[\"Response is correct\"] = _.matches(expected)(responseData);\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429632436185,
					"name": "Create an instance",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "bc8836c9-b43c-e8da-db41-3bfd310851f1"
				},
				{
					"id": "11035ed7-8f10-f2f7-177d-888e877ab7fd",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/inboxes/{{inboxId}}?apiKey={{apiKey}}",
					"preRequestScript": "// the first time run it with 200 then 410\npostman.setGlobalVariable('statusCode', 200);",
					"pathVariables": {},
					"method": "DELETE",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar inboxId = postman.getGlobalVariable('inboxId');\nvar responseData = JSON.parse(responseBody);\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\n\ntests[\"Status code is correct\"] = responseCode.code === statusCode;\n\nif(responseCode.code === 200){\n    var expected = {\n        \"message\": \"The inbox \" + inboxId + \" has been removed from instance \" + instanceId + \".\"\n    };\n    \n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\n\nif(responseCode.code === 410){\n    var expected = {\n        \"errors\":[ \"The inbox \" + inboxId + \" has been removed from instance \" + instanceId + \".\" ]\n    };\n    \n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1432305697574,
					"name": "Remove an inbox - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": []
				},
				{
					"id": "15a86c38-d605-71eb-6fdb-117183546ae4",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}/inboxes?apiKey={{apiKey}}",
					"preRequestScript": "",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar digestId = postman.getGlobalVariable('digestId');\nvar digestDescription = postman.getGlobalVariable(\"digestDescription\");\nvar inboxCount = postman.getGlobalVariable('inboxCount');\nvar inboxId1 = postman.getGlobalVariable('streamInboxId1');\nvar inboxFamily1 = postman.getGlobalVariable('streamInboxFamily1');\nvar inboxName1 = postman.getGlobalVariable('streamInboxName1');\nvar inboxUrl1 = postman.getGlobalVariable('streamInboxURL1');\nvar inboxId2 = postman.getGlobalVariable('streamInboxId2');\nvar inboxFamily2 = postman.getGlobalVariable('streamInboxFamily2');\nvar inboxName2 = postman.getGlobalVariable('streamInboxName2');\nvar inboxUrl2 = postman.getGlobalVariable('streamInboxURL2');\n\nvar responseData = JSON.parse(responseBody);\nif(responseCode.code === 200){\n    if(inboxCount > 1){\n        var expected = {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId+ \"/inboxes\"\n            },\n            \"digest\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n            },\n            \"inbox-create\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\n            \"method\": \"POST\",\n            \"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n            }\n            },\n            \"count\": inboxCount,\n            \"digest\": {\n            \"description\": digestDescription,\n            \"digestId\": digestId\n            },\n            \"_embedded\": {\n            \"inboxes\": [\n            {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId2\n            },\n            \"inbox-commits\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId2 + \"/commits\",\n            \"method\": \"POST\"\n            }\n            },\n            \"inboxId\": inboxId2,\n            \"family\": inboxFamily2,\n            \"name\": inboxName2\n            },\n            {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId1\n            },\n            \"inbox-commits\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId1 + \"/commits\",\n            \"method\": \"POST\"\n            }\n            },\n            \"inboxId\": inboxId1,\n            \"family\": inboxFamily1,\n            \"name\": inboxName1\n            \n            }\n            ]\n            }\n        };\n        \n        if(inboxUrl1 != \"null\" && inboxUrl1 != \"undefined\"){\n            expected._embedded.inboxes[1].url = inboxUrl1\n        }\n        if(inboxUrl2 != \"null\" && inboxUrl2 != \"undefined\"){\n            expected._embedded.inboxes[0].url = inboxUrl2\n        }\n    }\n    if(inboxCount === 1){\n        var expected = {\n            \"_links\":{\n                \"self\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\"\n                    \n                },\n                \"digest\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n                    \n                },\n                \"inbox-create\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\n                    \"method\":\"POST\",\n                    \"title\":\"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n                }\n            },\n            \"count\": inboxCount,\n            \"digest\":{\n                \"description\":digestDescription,\n                \"digestId\": digestId\n            },\n            \"_embedded\":{\n                \"inboxes\":[\n                    {\n                        \"_links\":{\n                            \"self\":{\n                                \"href\":\"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId1\n                                \n                            },\n                            \"inbox-commits\":{\n                                \"href\":\"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId1 + \"/commits\",\n                                \"method\":\"POST\"\n                                \n                            }\n                            \n                        },\n                        \"inboxId\":inboxId1,\n                        \"family\":inboxFamily1,\n                        \"name\":inboxName1,\n                        \"url\":inboxUrl1\n                        \n                    }\n                ]\n                \n            }\n        };\n    }\n    if(inboxCount === 0){\n        var expected = {\n            \"_links\":{\n                \"self\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\"\n                    \n                },\n                \"digest\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n                    \n                },\n                \"inbox-create\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\n                    \"method\":\"POST\",\n                    \"title\":\"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n                    \n                }\n                \n            },\n            \"count\":inboxCount,\n            \"digest\":{\n                \"description\":digestDescription,\n                \"digestId\":digestId\n                \n            },\n            \"_embedded\":{\n                \"inboxes\":[]\n                \n            }\n            \n        };\n\n    }\n    console.log(expected)\n    tests[\"Status code is correct\"] = responseCode.code === 200;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\");\n    tests[\"Response Body is correct \" + JSON.stringify(expected)] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 404){\n    var expected = {\"errors\":[\"Could not find digest with id \" + digestId + \".\"]};\n    \n    tests[\"Status code is correct\"] = responseCode.code === 404;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 400){\n    var expected = {\"errors\":[\"The value \" + digestId + \" is not a valid identifier for digest\"]}\n;\n    \n    tests[\"Status code is correct\"] = responseCode.code === 400;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1430431425332,
					"name": "Get info about all inboxes",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "c51dd647-b2bc-6fbb-5586-82513c554e60"
				},
				{
					"id": "1c4a97aa-aed4-40d1-2fe7-d1172f0f8bf8",
					"headers": "{{reqHeaderContentType}}: {{requestHeaderValue}}\n{{commitHeaderType}}: {{commitHeaderValue}}\n",
					"url": "{{rootURL}}/{{instanceId}}/inboxes/{{inboxId}}/commits?apiKey={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable(\"apiKey\", null);\n//postman.setGlobalVariable(\"instanceId\", null);\npostman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 201);\npostman.setGlobalVariable('commitHeaderType', 'x-github-event');\npostman.setGlobalVariable('commitHeaderValue', 'push');\npostman.setGlobalVariable('workItem', 'S-11111');\n\n\n",
					"pathVariables": {},
					"method": "POST",
					"data": "{\r\n  \"ref\": \"refs/heads/master\",\r\n  \"commits\": [{\r\n    \"id\": \"d31d174f0495feaf876e92573a2121700fd81e7a\",\r\n    \"distinct\": true,\r\n    \"message\": \"Sending a commit! S-11111\",\r\n    \"timestamp\": \"2014-10-03T15:57:14-03:00\",\r\n    \"url\": \"https://github.com/kunzimariano/CommitService.DemoRepo/commit/d31d174f0495feaf876e92573a2121700fd81e7a\",\r\n    \"author\": {\r\n      \"name\": \"kunzimariano\",\r\n      \"email\": \"kunzi.mariano@gmail.com\",\r\n      \"username\": \"kunzimariano\"\r\n    },\r\n    \"committer\": {\r\n      \"name\": \"kunzimariano\",\r\n      \"email\": \"kunzi.mariano@gmail.com\",\r\n      \"username\": \"kunzimariano\"\r\n    },\r\n    \"added\": [],\r\n    \"removed\": [],\r\n    \"modified\": [\"README.md\"]\r\n  }, {\r\n    \"id\": \"p31d188f0495feaf876e92573a5656700fd81e7x\",\r\n    \"distinct\": true,\r\n    \"message\": \"Another commit is up!S-11111\",\r\n    \"timestamp\": \"2014-10-03T15:58:14-03:00\",\r\n    \"url\": \"https://github.com/kunzimariano/CommitService.DemoRepo/commit/p31d188f0495feaf876e92573a5656700fd81e7x\",\r\n    \"author\": {\r\n      \"name\": \"kunzimariano\",\r\n      \"email\": \"kunzi.mariano@gmail.com\",\r\n      \"username\": \"kunzimariano\"\r\n    },\r\n    \"committer\": {\r\n      \"name\": \"kunzimariano\",\r\n      \"email\": \"kunzi.mariano@gmail.com\",\r\n      \"username\": \"kunzimariano\"\r\n    },\r\n    \"added\": [],\r\n    \"removed\": [],\r\n    \"modified\": [\"LICENSE.md\"]\r\n  }  \r\n  ],\r\n  \"repository\": {\r\n    \"id\": 23355501,\r\n    \"name\": \"CommitService.DemoRepo\"\r\n  }\r\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var responseData = JSON.parse(responseBody);\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\nvar apiKey = postman.getGlobalVariable('apiKey');\nvar instanceId = postman.getGlobalVariable('instanceId');\nvar inboxId = postman.getGlobalVariable('inboxId');\nvar digestId = postman.getGlobalVariable('digestId');\nvar commitHeaderType = postman.getGlobalVariable('commitHeaderType');\nvar commitHeaderValue = postman.getGlobalVariable('commitHeaderValue');\nvar workItem = postman.getGlobalVariable('workItem');\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar potentialErrorsMap = {\n    x_header: 'The header x-github-event is required.',\n    cv_header: 'Invalid x-github-event: ' + commitHeaderValue,\n    nf_inboxId: 'Could not find inbox with id ' + inboxId,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    in_instanceId: 'The inbox ' + inboxId + 'does not exist for instance ' + instanceId,\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId,\n    p_header: 'When issuing a POSt to the CommitStream API, you must send a Content-Type: application/json header.'\n}\n\n\nfunction getExpectedErrors(errorTypes) {\n\tvar errorTypesArray = errorTypes.split(',');\n\treturn {errors: _.map(errorTypesArray, function(errorTypeKey) {\n\t\treturn potentialErrorsMap[errorTypeKey]\n    }\n\t)};\n}\n\ntests[\"Status code is correct\"] = responseCode.code === statusCode;\n\nif(responseCode.code === 201) {\n\n//postman.setGlobalVariable(\"digest-query\", responseData._links['digest-query'].href);\n//postman.setGlobalVariable(\"instance-query\", responseData._links['instance-query'].href);\n//postman.setGlobalVariable(\"workitem\", \"S-11111\");\n//postman.setGlobalVariable(\"instanceQueryWithWorkteItemUrl\", instanceQueryWithWorkteItemUrl);\n//var instanceQueryWithWorkteItemUrl = responseData._links['instance-query'].href;\n//instanceQueryWithWorkteItemUrl = instanceQueryWithWorkteItemUrl.substr(0, instanceQueryWithWorkteItemUrl.indexOf(\":workitems\")) + \"S-11111\";\n\n    var expected = {\n      \"_links\":{\n        \"self\":{\n          \"href\":\"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n        },\n        \"digest-parent\":{\n          \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n        },\n        \"digest-query\":{\n          \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/commits\"\n        },\n        \"instance-query\":{\n          \"href\":\"http://localhost:6565/api/\" + instanceId + \"/commits/tags/versionone/workitems/:workitems\"\n        }\n      },\n      \"message\":\"The commits have been added to the CommitStream inbox.\"\n    };\n    \n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\");\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 200){\n    var expected = {\"message\":\"Pong.\"};\n    \n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n\ttests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n\ttests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n    \n}\nif(responseCode.code != 201 && responseCode.code != 200){\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n\ttests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n\ttests[\"Response Body is correct\"] = _.matches(getExpectedErrors(errorTypes))(responseData);\n}\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431725003756,
					"name": "Add GitHub Commits to Inbox - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "222fbde0-dfa7-f7fe-40ab-cfb4892271c0",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/commits/tags/versionone/workitems/{{workItem}}?apiKey={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable(\"apiKey\", null);\n//postman.setGlobalVariable(\"instanceId\", null);\npostman.setGlobalVariable('statusCode', 200);\npostman.setGlobalVariable('workItem', 'S-11111');",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var statusCode = parseInt(postman.getGlobalVariable('statusCode'));\nvar workItem = postman.getGlobalVariable('workItem');\n\ntests['Status code is correct'] = responseCode.code === 200;\n\nif (responseCode.code === 200) {\n    var responseData = JSON.parse(responseBody);    \n\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests['Response Body contains work item: ' + workItem + \" and message: \" + JSON.stringify(responseData.commits[0].message)] = _.includes(responseData.commits[0].message, workItem);    \n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431726139801,
					"name": "Get instance commits for workitem - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"synced": true,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075",
					"isFromCollection": true,
					"collectionRequestId": "222fbde0-dfa7-f7fe-40ab-cfb4892271c0",
					"owner": 0
				},
				{
					"id": "3241724c-f27b-f24b-e0ef-435aca8eef8b",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/inboxes/{{inboxId}}?apiKey={{apiKey}}",
					"preRequestScript": "",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar digestId = postman.getGlobalVariable('digestId');\nvar inboxId = postman.getGlobalVariable('inboxId');\nvar inboxFamily = postman.getGlobalVariable('inboxFamily');\nvar inboxName = postman.getGlobalVariable('inboxName');\nvar responseData = JSON.parse(responseBody);\nif(responseCode.code === 200){\nvar expected = {\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId\n        },\n        \"digest-parent\": {\n          \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n        },\n        \"add-commit\": {\n          \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n        }\n      },\n      \"inboxId\": inboxId,\n      \"family\": inboxFamily,\n      \"name\": inboxName\n    };\n\n    tests[\"Status code is correct\"] = responseCode.code === 200;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/inboxes/\" + inboxId);\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 404){\n    var expected = {\"errors\":[\"Could not find inbox with id \" + inboxId + \".\"]};\n    \n    tests[\"Status code is correct\"] = responseCode.code === 404;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 400){\n    var expected = {\"errors\":[\"The value \" + inboxId + \" is not a valid identifier for inbox\"]};\n    \n    tests[\"Status code is correct\"] = responseCode.code === 400;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1430410847754,
					"name": "Get info about an inbox",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"synced": true,
					"folder": "c51dd647-b2bc-6fbb-5586-82513c554e60",
					"owner": 0
				},
				{
					"id": "411ca69c-50f1-db64-b33c-a82302598680",
					"headers": "{{reqHeaderContentType}}: {{requestHeaderValue}}\n",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}/inboxes?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('requestHeaderValue', 'application/json');\npostman.setGlobalVariable('inboxId', null);\npostman.setGlobalVariable('inboxFamily', 'GitHub');\npostman.setGlobalVariable('inboxName', 'sing it Gonzo!');\npostman.setGlobalVariable('inboxURL', 'http://gonzolove.com/super');\npostman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 201);",
					"pathVariables": {},
					"method": "POST",
					"data": "{\r\n  \"digestId\": \"{{digestId}}\",\r\n  \"family\": \"{{inboxFamily}}\",\r\n  \"name\": \"{{inboxName}}\",\r\n  \"url\": \"{{inboxURL}}\"\r\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var digestId = postman.getGlobalVariable(\"digestId\");\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable(\"inboxId\", responseData.inboxId);\nvar inboxId = postman.getGlobalVariable(\"inboxId\");\nvar inboxName = postman.getGlobalVariable(\"inboxName\");\nvar inboxFamily = postman.getGlobalVariable(\"inboxFamily\");\nvar inboxURL = postman.getGlobalVariable(\"inboxURL\");\nvar instanceId = postman.getGlobalVariable(\"instanceId\");\nvar digestId = postman.getGlobalVariable(\"digestId\");\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\nvar potentialErrorsMap = {\n    r_name: 'inbox requires property \"name\"', \n    r_family: 'inbox requires property \"family\"',\n    e_family: 'inbox.family is not one of enum values: GitHub',\n    s_name: 'inbox.name cannot contain script tags or HTML.',\n    s_url: 'inbox.url cannot contain script tags or HTML.',\n    s_family: 'inbox.family cannot contain script tags or HTML.',\n    i_name: 'inbox.name does not meet the minimum length of 3',\n    x_name: 'inbox.name does not meet the maximum length of 140',\n    i_digestId: 'inbox.digestId does not meet the minimum length of 36',\n    i_url: 'inbox.url does not meet the minimum length of 10',\n    x_url: 'inbox.url does not meet the maximum length of 2000',\n    nf_digestId: 'Could not find a digest with id ' + digestId,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    p_header: 'When issuing a POST to the CommitStream API, you must send a Content-Type: application/json header.',\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\n};\n\nfunction getExpectedErrors(errorTypes) {\n    var errorTypesArray = errorTypes.split(',');\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\n        return potentialErrorsMap[errorTypeKey]\n    })};\n}\n\ntests[\"Status code is correct\"] = responseCode.code === statusCode;\n\nif(responseCode.code === 201) {\n        if(inboxURL === \"null\"){\n            var expected = {\n            \"_links\":{\n            \"self\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId\n            },\n            \"digest-parent\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n            },\n            \"add-commit\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n            }\n            },\n            \"inboxId\": inboxId,\n            \"family\": inboxFamily,\n            \"name\": inboxName\n            };\n        }\n        else {\n            var expected = {\n            \"_links\":{\n            \"self\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId\n            },\n            \"digest-parent\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n            },\n            \"add-commit\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n            }\n            },\n            \"inboxId\": inboxId,\n            \"family\": inboxFamily,\n            \"name\": inboxName,\n            \"url\": inboxURL\n            };\n            \n            tests[\"InboxURL contains http\"] = postman.getGlobalVariable(\"inboxURL\").startsWith(\"http\");\n        }\n        \n        tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n        tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/inboxes/\" + inboxId);\n        tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code != 201){\n        tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n        tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n        tests[\"Response Body is correct\"] = _.matches(getExpectedErrors(errorTypes))(responseData);\n}\n\n\n\n\n\n\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431724696694,
					"name": "Create a second inbox for a digest - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "4dc3d416-3ad8-9329-81ce-4300edb6faa2",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 400);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar digestId1 = postman.getGlobalVariable('streamDigestId1');\nvar digestId2 = postman.getGlobalVariable('streamDigestId2');\nvar digestCount = parseInt(postman.getGlobalVariable('digestCount'));\nvar digestDescription1 = postman.getGlobalVariable('streamDigestDescrip1');\nvar digestDescription2 = postman.getGlobalVariable('streamDigestDescrip2');\nvar responseData = JSON.parse(responseBody);\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\nvar potentialErrorsMap = {\n    nf_digestId: 'Could not find digest with id ' + digestId1,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\n};\n\nfunction getExpectedErrors(errorTypes) {\n    var errorTypesArray = errorTypes.split(',');\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\n        return potentialErrorsMap[errorTypeKey]\n    })};\n}\n\ntests['Status code is correct'] = responseCode.code === statusCode;\n\nif(responseCode.code === 200){\n    if(digestCount > 0){\n        var expected = {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n            }\n            },\n            \"count\": digestCount,\n            \"_embedded\": {\n            \"digests\": [\n            {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId1\n            }\n            },\n            \"digestId\": digestId1,\n            \"description\": digestDescription1\n            },\n            {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId2\n            }\n            },\n            \"digestId\": digestId2,\n            \"description\": digestDescription1\n            }\n            ]\n            }\n            };\n        \n        \n        tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n        tests['Location Header is correct' ] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests\");\n        tests['Digest count is correct'] = digestCount === responseData.count;\n        tests['Response Body is correct'] = _.matches(expected)(responseData);\n    }\n    if(digestCount === 0){\n        var expected = {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n            }\n            },\n            \"count\": digestCount,\n            \"_embedded\": {\n            \"digests\": [ ]\n            }\n            };\n        tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n        tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests\");\n        tests['Digest count is correct'] = digestCount === responseData.count;\n        tests['Response Body is correct'] = _.matches(expected)(responseData);\n    }\n}\nif(responseCode.code != 200){\n    \n    tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === null;\n    tests['Response Body is correct'] = _.matches(getExpectedErrors(errorTypes))(responseData);\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431652907500,
					"name": "Get info about ALL digests - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "4e9720ad-6df5-4643-a10a-01a09f0e2c76",
					"headers": "{{reqHeaderContentType}}: {{requestHeaderValue}}\n",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}/inboxes?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable(\"inboxId\", null);\npostman.setGlobalVariable(\"inboxFamily\", \"GitHub\");\npostman.setGlobalVariable(\"inboxName\", \"sing it Kermit!\");\n//postman.setGlobalVariable(\"inboxURL\", null);",
					"pathVariables": {},
					"method": "POST",
					"data": "{\r\n  \"digestId\": \"{{digestId}}\",\r\n \"family\": \"{{inboxFamily}}\",\r\n  \"name\": \"{{inboxName}}\"\r\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var digestId = postman.getGlobalVariable(\"digestId\");\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable(\"inboxId\", responseData.inboxId);\nvar inboxId = postman.getGlobalVariable(\"inboxId\");\nvar inboxName = postman.getGlobalVariable(\"inboxName\");\nvar inboxFamily = postman.getGlobalVariable(\"inboxFamily\");\nvar inboxURL = postman.getGlobalVariable(\"inboxURL\");\nvar instanceId = postman.getGlobalVariable(\"instanceId\");\nvar digestId = postman.getGlobalVariable(\"digestId\");\n\nif(responseCode.code === 201){\n    if(!inboxURL){\n        var expected = {\n        \"_links\":{\n        \"self\":{\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId\n        },\n        \"digest-parent\":{\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n        },\n        \"add-commit\":{\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n        }\n        },\n        \"inboxId\": inboxId,\n        \"family\": inboxFamily,\n        \"name\": inboxName\n        };\n        \n        tests[\"Status code is correct\"] = responseCode.code === 201;\n        tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n        tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/inboxes/\" + inboxId);\n        tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n    }\n    else {\n        var expected = {\n        \"_links\":{\n        \"self\":{\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId\n        },\n        \"digest-parent\":{\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n        },\n        \"add-commit\":{\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n        }\n        },\n        \"inboxId\": inboxId,\n        \"family\": inboxFamily,\n        \"name\": inboxName,\n        \"url\": inboxURL\n        };\n    \n    tests[\"Status code is correct\"] = responseCode.code === 201;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/inboxes/\" + inboxId);\n    tests[\"Response Body is correct \" + JSON.stringify(responseData)] = _.matches(expected)(responseData);\n    tests[\"InboxURL contains http\"] = postman.getGlobalVariable(\"inboxURL\").startsWith(\"http\");\n    }\n}\nif(responseCode.code === 415){\n    \n    var expected = {\"errors\":[\"When issuing a POST to the CommitStream API, you must send a Content-Type: application/json header.\"]};\n \n    tests[\"Status code is correct\"] = responseCode.code === 415;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);   \n}\nif(responseCode.code === 400){\n    \n     var potentialErrors = [\n        \"inbox requires property \\\"family\\\"\", \n        \"inbox requires property \\\"name\\\"\", \n        \"inbox requires property \\\"url\\\"\", \n        \"inbox.family is not one of enum values: GitHub\",\n        \"inbox.name cannot contain script tags or HTML.\",\n        \"inbox.family cannot contain script tags or HTML.\",\n        \"inbox.url cannot contain script tags or HTML.\",\n        \"inbox.name does not meet the minimum length of 3\",\n        \"inbox.digestId does not meet the minimum length of 36\",\n        \"inbox.instanceId does not meet the minimum length of 36\",\n        \"inbox.name does not meet maximum length of 140\",\n        \"inbox.url does not meet minimum length of 10\",\n        \"inbox.url does not meet maximum length of 2000\"];\n    \n    var errValue = _.intersection(responseData.errors, potentialErrors); \n\n    var expected = {\"errors\":errValue};\n    \n    tests[\"Status code is correct\"] = responseCode.code === 400;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 401){\n    var expected = {\"errors\":[\"Invalid apiKey for instance <instanceId>\"]};\n    \n    tests[\"Status code is correct\"] = responseCode.code === 401;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 404){\n    var potentialErrors = [\"Could not find digest with id \" + digestId, \"Could not find instance with id \" + instanceId];\n    var errValue = _.intersection(responseData.errors, potentialErrors);\n    var expected = {\"errors\":errValue};\n    \n    tests[\"Status code is correct\"] = responseCode.code === 404;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\n\n\n\n\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1430409800055,
					"name": "Create an inbox for a digest",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"synced": true,
					"folder": "c51dd647-b2bc-6fbb-5586-82513c554e60",
					"owner": 0
				},
				{
					"id": "567129fb-c3a2-6728-7902-a73dab80df02",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/commits/tags/versionone/workitems/{{workItem}}?apiKey={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable(\"apiKey\", null);\n//postman.setGlobalVariable(\"instanceId\", null);\npostman.setGlobalVariable('statusCode', 200);\npostman.setGlobalVariable('workItem', 'S-11111');",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var statusCode = parseInt(postman.getGlobalVariable('statusCode'));\nvar workItem = postman.getGlobalVariable('workItem');\n\ntests['Status code is correct'] = responseCode.code === 200;\n\nif (responseCode.code === 200) {\n    var responseData = JSON.parse(responseBody);    \n\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests['Response Body contains work item: ' + workItem + \" and message: \" + JSON.stringify(responseData.commits[0].message)] = _.includes(responseData.commits[0].message, workItem);    \n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431726139801,
					"name": "Get instance commits for workitem",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "8c9c3b96-c523-576e-db80-690dedf973e4"
				},
				{
					"id": "5763cfeb-b104-60eb-17ad-95000c835b48",
					"headers": "Content-Type: {{requestHeaderContentType}}\n",
					"url": "{{rootURL}}/digests?key={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable(\"apiKey\", null);\npostman.setGlobalVariable(\"digestId\", null);\n//postman.setGlobalVariable(\"digestDescription\", null);\n",
					"pathVariables": {},
					"method": "POST",
					"data": "{\n    \"{{digestDescription}}\"\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(responseCode.code === 201) {\n    var responseData = JSON.parse(responseBody);\n    postman.setGlobalVariable(\"digestId\", responseData.digestId);\n    \n    var digestId = postman.getGlobalVariable('digestId');\n    var expected = {\n    \"_links\": {\n    \"self\": {\n    \"href\": \"http://localhost:6565/api/digests/\" + digestId\n    },\n    \"digests\": {\n    \"href\": \"http://localhost:6565/api/digests\"\n    },\n    \"inbox-create\": {\n    \"href\": \"http://localhost:6565/api/inboxes\",\n    \"method\": \"POST\",\n    \"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n    }\n    },\n    \"digestId\": digestId\n    };\n    \n    tests[\"Create Digest status code is correct \" + responseCode.code] = responseCode.code === 201;\n    tests[\"Create Digest Response Header is correct \" + postman.getGlobalVariable(\"digestResponseHeaderContentType\")] = postman.getResponseHeader(\"Content-Type\").startsWith(postman.getGlobalVariable(\"digestResponseHeaderContentType\"));\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/digests/\" + digestId);\n    tests[\"Create Digest Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 400){\n    var expectedDescrip = \"A digest description must contain a value.\";\n    var expectedScript = \"A digest description cannot contain script tags or HTML.\"\n    var requestLength = postman.getGlobalVariable(\"digestDescription\").length;\n    var expectedChar = \"A digest description cannot contain more than 140 characters. The description you submitted contains \" + requestLength + \" characters.\"\n    var expectedNull = \"A digest description must not be null.\";\n    var expectedBadDescrip = \"A digest must contain a description.\";\n    var expectedNoDesripLabel = \"SyntaxError: Unexpected token\";\n    \n    tests[\"Create Digest with bad request body status code is correct \" + responseCode.code] = responseCode.code === 400;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    if(responseData.includes(\"tags\")){\n        tests[\"Response body is error message \" + expectedScript] = responseData === expectedScript;\n    }\n    if(responseData.includes(\"value\")){\n        tests[\"Response body is error message \" + expectedDescrip] = responseData === expectedDescrip;\n    }\n    if(responseData.includes(\"140\")){\n        tests[\"Response body is error message \" + expectedChar] = responseData === expectedChar;\n    }\n    if(responseData.includes(\"null\")){\n        tests[\"Response body is error message \" + expectedNull] = responseData === expectedNull;\n    }\n    if(responseData === expectedBadDescrip){\n        tests[\"Response body is error message \" + expectedBadDescrip] = responseData === expectedBadDescrip;\n    }\n    if(responseData.includes(\"SyntaxError\")){\n        tests[\"Response body is error message \" + expectedNoDesripLabel] = responseData.startsWith(expectedNoDesripLabel);\n    }\n}\nif(responseCode.code === 401){\n    var expected = \"API key parameter missing or invalid\";\n    \n    tests[\"Create Digest with bad or missing apiKey status code is correct \" + responseCode.code] = responseCode.code === 401;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response body is error message \" + expected] = responseData === expected;\n}\nif(responseCode.code === 415){\n    var expected = \"When creating a digest, you must send a Content-Type: application/json header.\";\n    \n    tests[\"Create Digest with bad or missing apiKey status code is correct \" + responseCode.code] = responseCode.code === 415;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response body is error message \" + expected] = responseData === expected;\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429210740638,
					"name": "apiKey-instanceId sad cases",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"write": true,
					"folder": "c114730a-5f6a-1b32-75bc-0643232eb37d",
					"synced": true,
					"isFromCollection": true,
					"collectionRequestId": "5763cfeb-b104-60eb-17ad-95000c835b48",
					"owner": 0
				},
				{
					"id": "5a68883f-ddf1-6909-d4ed-68bb5cee1f14",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 400);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar digestId1 = postman.getGlobalVariable('streamDigestId1');\nvar digestId2 = postman.getGlobalVariable('streamDigestId2');\nvar digestCount = parseInt(postman.getGlobalVariable('digestCount'));\nvar digestDescription1 = postman.getGlobalVariable('streamDigestDescrip1');\nvar digestDescription2 = postman.getGlobalVariable('streamDigestDescrip2');\nvar responseData = JSON.parse(responseBody);\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\nvar potentialErrorsMap = {\n    nf_digestId: 'Could not find digest with id ' + digestId1,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\n};\n\nfunction getExpectedErrors(errorTypes) {\n    var errorTypesArray = errorTypes.split(',');\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\n        return potentialErrorsMap[errorTypeKey]\n    })};\n}\n\ntests[\"Status code is correct\"] = responseCode.code === statusCode;\n\nif(responseCode.code === 200){\n    if(digestCount === 1){\n        var expected = {\n        \"_links\": {\n        \"self\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n        }\n        },\n        \"count\": digestCount,\n        \"_embedded\": {\n        \"digests\": [\n        {\n        \"_links\": {\n        \"self\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId1\n        }\n        },\n        \"digestId\": digestId1,\n        \"description\": digestDescription1\n        }\n        ]\n        }\n        };\n    }\n    if(digestCount > 1){\n        var expected = {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n            }\n            },\n            \"count\": digestCount,\n            \"_embedded\": {\n            \"digests\": [\n            {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId1\n            }\n            },\n            \"digestId\": digestId1,\n            \"description\": digestDescription1\n            },\n            {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId2\n            }\n            },\n            \"digestId\": digestId2,\n            \"description\": digestDescription2\n            }\n            ]\n            }\n            };\n    }\n    if(digestCount === 0){\n        var expected = {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n            }\n            },\n            \"count\": digestCount,\n            \"_embedded\": {\n            \"digests\": [ ]\n            }\n            };\n    }\n\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Instance Location Header is correct\" ] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests\");\n    tests[\"Digest count is correct\"] = digestCount === responseData.count;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code != 200){\n\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(getExpectedErrors(errorTypes))(responseData);\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431652276580,
					"name": "Get info about ALL digests - csv copy",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "5ad41eed-30d3-b52c-ee56-1ecbfecc4c20",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}/commits?apiKey={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable(\"apiKey\", null);\n//postman.setGlobalVariable(\"instanceId\", null);\npostman.setGlobalVariable(\"statusCode\", 200);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var statusCode = parseInt(postman.getGlobalVariable('statusCode'));\r\nvar workItem = postman.getGlobalVariable('workItem');\r\n\r\ntests[\"Status code is correct\"] = responseCode.code === 200;\r\n\r\nif (responseCode.code === 200) {\r\n    var responseData = JSON.parse(responseBody);    \r\n\r\n    var expected = {\r\n      \"commits\":[\r\n        {\r\n          \"commitDate\":\"2014-10-03T14:58:14-04:00\",\r\n          \"timeFormatted\":\"7 months ago\",\r\n          \"author\":\"kunzimariano\",\r\n          \"sha1Partial\":\"p31d18\",\r\n          \"action\":\"committed\",\r\n          \"message\":\"Another commit is up!S-11111\",\r\n          \"commitHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo/commit/p31d188f0495feaf876e92573a5656700fd81e7x\",\r\n          \"repo\":\"kunzimariano/CommitService.DemoRepo\",\r\n          \"branch\":\"master\",\r\n          \"branchHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo/tree/master\",\r\n          \"repoHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo\"\r\n        },\r\n        {\r\n          \"commitDate\":\"2014-10-03T14:57:14-04:00\",\r\n          \"timeFormatted\":\"7 months ago\",\r\n          \"author\":\"kunzimariano\",\r\n          \"sha1Partial\":\"d31d17\",\r\n          \"action\":\"committed\",\r\n          \"message\":\"Sending a commit!S-11111\",\r\n          \"commitHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo/commit/d31d174f0495feaf876e92573a2121700fd81e7a\",\r\n          \"repo\":\"kunzimariano/CommitService.DemoRepo\",\r\n          \"branch\":\"master\",\r\n          \"branchHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo/tree/master\",\r\n          \"repoHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo\"\r\n        }\r\n      ],\r\n      \"_links\":{\r\n    \r\n      }\r\n    };\r\n    \r\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\r\n    tests['Response Body contains work item: ' + workItem + \" and message: \" + JSON.stringify(responseData.commits[5].message)] = _.includes(responseData.commits[0].message, workItem);    \r\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\r\n}\r\n\r\n\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431725855599,
					"name": "Get digest commits - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"synced": true,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075",
					"isFromCollection": true,
					"collectionRequestId": "5ad41eed-30d3-b52c-ee56-1ecbfecc4c20",
					"owner": 0
				},
				{
					"id": "64e24d5e-0e25-472f-7416-f90997cd8c99",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}?apiKey={{apiKey}}",
					"preRequestScript": "",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar digestId = postman.getGlobalVariable('digestId');\nvar digestDescription = postman.getGlobalVariable('digestDescription');\nvar responseData = JSON.parse(responseBody);\nvar expected = {\n\"_links\": {\n\"self\": {\n\"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n},\n\"digests\": {\n\"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n},\n\"inbox-create\": {\n\"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\n\"method\": \"POST\",\n\"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n},\n\"inboxes\": {\n\"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\"\n}\n},\n\"description\": digestDescription,\n\"digestId\": digestId\n};\n\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\ntests[\"GET Instance Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests/\" + digestId);\ntests[\"GET Response Body is correct\"] = _.matches(expected)(responseData);\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429810584631,
					"name": "Get info about a digest",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "190f176e-2c29-3610-a706-7773f35d20d2"
				},
				{
					"id": "65705602-9cc4-0be1-cbcf-3036b3463957",
					"headers": "{{reqHeaderContentType}}: {{requestHeaderValue}}\n{{commitHeaderType}}: {{commitHeaderValue}}\n",
					"url": "{{rootURL}}/{{instanceId}}/inboxes/{{inboxId}}/commits?apiKey={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable('apiKey', null);\n//postman.setGlobalVariable('instanceId', null);\npostman.setGlobalVariable('errorTypes', 'x_header');\npostman.setGlobalVariable('statusCode', 201);\npostman.setGlobalVariable('commitHeaderType', 'x-github');\npostman.setGlobalVariable('commitHeaderValue', 'ping');\npostman.setGlobalVariable('workItem', 'S-11111');\n\n\n",
					"pathVariables": {},
					"method": "POST",
					"data": "{\r\n  \"ref\": \"refs/heads/master\",\r\n  \"commits\": [{\r\n    \"id\": \"d31d174f0495feaf876e92573a2121700fd81e7a\",\r\n    \"distinct\": true,\r\n    \"message\": \"Sending a commit! S-11111\",\r\n    \"timestamp\": \"2014-10-03T15:57:14-03:00\",\r\n    \"url\": \"https://github.com/kunzimariano/CommitService.DemoRepo/commit/d31d174f0495feaf876e92573a2121700fd81e7a\",\r\n    \"author\": {\r\n      \"name\": \"kunzimariano\",\r\n      \"email\": \"kunzi.mariano@gmail.com\",\r\n      \"username\": \"kunzimariano\"\r\n    },\r\n    \"committer\": {\r\n      \"name\": \"kunzimariano\",\r\n      \"email\": \"kunzi.mariano@gmail.com\",\r\n      \"username\": \"kunzimariano\"\r\n    },\r\n    \"added\": [],\r\n    \"removed\": [],\r\n    \"modified\": [\"README.md\"]\r\n  }, {\r\n    \"id\": \"p31d188f0495feaf876e92573a5656700fd81e7x\",\r\n    \"distinct\": true,\r\n    \"message\": \"Another commit is up!S-11111\",\r\n    \"timestamp\": \"2014-10-03T15:58:14-03:00\",\r\n    \"url\": \"https://github.com/kunzimariano/CommitService.DemoRepo/commit/p31d188f0495feaf876e92573a5656700fd81e7x\",\r\n    \"author\": {\r\n      \"name\": \"kunzimariano\",\r\n      \"email\": \"kunzi.mariano@gmail.com\",\r\n      \"username\": \"kunzimariano\"\r\n    },\r\n    \"committer\": {\r\n      \"name\": \"kunzimariano\",\r\n      \"email\": \"kunzi.mariano@gmail.com\",\r\n      \"username\": \"kunzimariano\"\r\n    },\r\n    \"added\": [],\r\n    \"removed\": [],\r\n    \"modified\": [\"LICENSE.md\"]\r\n  }  \r\n  ],\r\n  \"repository\": {\r\n    \"id\": 23355501,\r\n    \"name\": \"CommitService.DemoRepo\"\r\n  }\r\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var responseData = JSON.parse(responseBody);\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\nvar apiKey = postman.getGlobalVariable('apiKey');\nvar instanceId = postman.getGlobalVariable('instanceId');\nvar inboxId = postman.getGlobalVariable('inboxId');\nvar digestId = postman.getGlobalVariable('digestId');\nvar commitHeaderType = postman.getGlobalVariable('commitHeaderType');\nvar commitHeaderValue = postman.getGlobalVariable('commitHeaderValue');\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar potentialErrorsMap = {\n    x_header: 'The header x-github-event is required.',\n    cv_header: 'Invalid x-github-event: ' + commitHeaderValue,\n    nf_inboxId: 'Could not find inbox with id ' + inboxId,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    in_instanceId: 'The inbox ' + inboxId + 'does not exist for instance ' + instanceId,\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId,\n    p_header: 'When issuing a POSt to the CommitStream API, you must send a Content-Type: application/json header.'\n}\n\n\nfunction getExpectedErrors(errorTypes) {\n\tvar errorTypesArray = errorTypes.split(',');\n\treturn {errors: _.map(errorTypesArray, function(errorTypeKey) {\n\t\treturn potentialErrorsMap[errorTypeKey]\n    }\n\t)};\n}\n\ntests[\"Status code is correct\"] = responseCode.code === statusCode;\n\nif(responseCode.code === 201) {\n\n//postman.setGlobalVariable(\"digest-query\", responseData._links['digest-query'].href);\n//postman.setGlobalVariable(\"instance-query\", responseData._links['instance-query'].href);\n//postman.setGlobalVariable(\"workitem\", \"S-11111\");\n//postman.setGlobalVariable(\"instanceQueryWithWorkteItemUrl\", instanceQueryWithWorkteItemUrl);\n//var instanceQueryWithWorkteItemUrl = responseData._links['instance-query'].href;\n//instanceQueryWithWorkteItemUrl = instanceQueryWithWorkteItemUrl.substr(0, instanceQueryWithWorkteItemUrl.indexOf(\":workitems\")) + \"S-11111\";\n\n    var expected = {\n      \"_links\":{\n        \"self\":{\n          \"href\":\"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n        },\n        \"digest-parent\":{\n          \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n        },\n        \"digest-query\":{\n          \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/commits\"\n        },\n        \"instance-query\":{\n          \"href\":\"http://localhost:6565/api/\" + instanceId + \"/commits/tags/versionone/workitems/:workitems\"\n        }\n      },\n      \"message\":\"The commits have been added to the CommitStream inbox.\"\n    };\n    \n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\");\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 200){\n    var expected = {\"message\":\"Pong.\"};\n    \n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n\ttests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n\ttests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n    \n}\nif(responseCode.code != 201 && responseCode.code != 200){\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n\ttests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n\ttests[\"Response Body is correct\"] = _.matches(getExpectedErrors(errorTypes))(responseData);\n}\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431726298038,
					"name": "Add GitHub Commits to Inbox",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "8c9c3b96-c523-576e-db80-690dedf973e4"
				},
				{
					"id": "6beba802-da8c-5e60-0960-6137d23631f2",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/inboxes/{{inboxId}}?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 400);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar digestId = postman.getGlobalVariable('digestId');\nvar inboxId = postman.getGlobalVariable('inboxId');\nvar inboxFamily = postman.getGlobalVariable('inboxFamily');\nvar inboxName = postman.getGlobalVariable('inboxName');\nvar responseData = JSON.parse(responseBody);\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\nvar potentialErrorsMap = {\n    nf_digestId: 'Could not find digest with id ' + digestId1,\n    nf_inboxId: 'Could not find inbox with id ' + inboxId,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\n};\n\nfunction getExpectedErrors(errorTypes) {\n    var errorTypesArray = errorTypes.split(',');\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\n        return potentialErrorsMap[errorTypeKey]\n    })};\n}\n\ntests[\"Status code is correct\"] = responseCode.code === statusCode;\n\nif(responseCode.code === 200){\n    var expected = {\n          \"_links\": {\n            \"self\": {\n              \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId\n            },\n            \"digest-parent\": {\n              \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n            },\n            \"add-commit\": {\n              \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n            }\n          },\n          \"inboxId\": inboxId,\n          \"family\": inboxFamily,\n          \"name\": inboxName\n        };\n\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/inboxes/\" + inboxId);\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code != 200){\n    \n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431652342385,
					"name": "Get info about an inbox - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "7a3a9efe-e6c4-ebf5-a0c2-6046ae4e5400",
					"headers": "Content-Type: {{requestHeaderContentType}}\n",
					"url": "{{rootURL}}/digests?key={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable(\"apiKey\", null);\npostman.setGlobalVariable(\"digestId\", null);\n//postman.setGlobalVariable(\"digestDescription\", null);\n",
					"pathVariables": {},
					"method": "POST",
					"data": "{\n  \"description\": \"{{digestDescription}}\"\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(responseCode.code === 201) {\n    var responseData = JSON.parse(responseBody);\n    postman.setGlobalVariable(\"digestId\", responseData.digestId);\n    \n    var digestId = postman.getGlobalVariable('digestId');\n    var expected = {\n    \"_links\": {\n    \"self\": {\n    \"href\": \"http://localhost:6565/api/digests/\" + digestId\n    },\n    \"digests\": {\n    \"href\": \"http://localhost:6565/api/digests\"\n    },\n    \"inbox-create\": {\n    \"href\": \"http://localhost:6565/api/inboxes\",\n    \"method\": \"POST\",\n    \"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n    }\n    },\n    \"digestId\": digestId\n    };\n    \n    tests[\"Create Digest status code is correct \" + responseCode.code] = responseCode.code === 201;\n    tests[\"Create Digest Response Header is correct \" + postman.getGlobalVariable(\"digestResponseHeaderContentType\")] = postman.getResponseHeader(\"Content-Type\").startsWith(postman.getGlobalVariable(\"digestResponseHeaderContentType\"));\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/digests/\" + digestId);\n    tests[\"Create Digest Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 400){\n    var expectedDescrip = \"A digest description must contain a value.\";\n    var expectedScript = \"A digest description cannot contain script tags or HTML.\"\n    var requestLength = postman.getGlobalVariable(\"digestDescription\").length;\n    var expectedChar = \"A digest description cannot contain more than 140 characters. The description you submitted contains \" + requestLength + \" characters.\"\n    var expectedNull = \"A digest description must not be null.\";\n    var expectedBadDescrip = \"A digest must contain a description.\";\n    var expectedNoDesripLabel = \"SyntaxError: Unexpected token\";\n    \n    tests[\"Create Digest with bad request body status code is correct \" + responseCode.code] = responseCode.code === 400;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    if(responseData.includes(\"tags\")){\n        tests[\"Response body is error message \" + expectedScript] = responseData === expectedScript;\n    }\n    if(responseData.includes(\"value\")){\n        tests[\"Response body is error message \" + expectedDescrip] = responseData === expectedDescrip;\n    }\n    if(responseData.includes(\"140\")){\n        tests[\"Response body is error message \" + expectedChar] = responseData === expectedChar;\n    }\n    if(responseData.includes(\"null\")){\n        tests[\"Response body is error message \" + expectedNull] = responseData === expectedNull;\n    }\n    if(responseData === expectedBadDescrip){\n        tests[\"Response body is error message \" + expectedBadDescrip] = responseData === expectedBadDescrip;\n    }\n    if(responseData.includes(\"SyntaxError\")){\n        tests[\"Response body is error message \" + expectedNoDesripLabel] = responseData.startsWith(expectedNoDesripLabel);\n    }\n}\nif(responseCode.code === 401){\n    var expected = \"API key parameter missing or invalid\";\n    \n    tests[\"Create Digest with bad or missing apiKey status code is correct \" + responseCode.code] = responseCode.code === 401;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response body is error message \" + expected] = responseData === expected;\n}\nif(responseCode.code === 415){\n    var expected = \"When creating a digest, you must send a Content-Type: application/json header.\";\n    \n    tests[\"Create Digest with bad or missing apiKey status code is correct \" + responseCode.code] = responseCode.code === 415;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response body is error message \" + expected] = responseData === expected;\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429816701242,
					"name": "Create a digest",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "190f176e-2c29-3610-a706-7773f35d20d2"
				},
				{
					"id": "7d71f7da-3e2e-8ff4-a3f3-0c046ed353f8",
					"headers": "Authorization: Basic YWRtaW46Y2hhbmdlaXQ=\nAccept: application/json\n",
					"url": "http://localhost:2113/streams/digests-{{instanceId}}?embed=content",
					"preRequestScript": "postman.setGlobalVariable('digestCount', null);\npostman.setGlobalVariable('streamDigestId1', null);\npostman.setGlobalVariable('streamDigestId2', null);\npostman.setGlobalVariable('streamDigestDescrip1', null);\npostman.setGlobalVariable('streamDigestDescrip2', null);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(_.isEmpty(responseData)){\n    postman.setGlobalVariable('digestCount', 0);\n}\nelse {\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable('digestCount', responseData.entries.length);\npostman.setGlobalVariable('streamDigestId1', responseData.entries[0].content.data.digestId);\npostman.setGlobalVariable('streamDigestDescrip1', responseData.entries[0].content.data.description);\npostman.setGlobalVariable('streamDigestId2', responseData.entries[1].content.data.digestId);\npostman.setGlobalVariable('streamDigestDescrip2', responseData.entries[1].content.data.description);\n\n\nvar streamDigestId1 = postman.getGlobalVariable('streamDigestId1');\nvar streamDigestDescrip1 = postman.getGlobalVariable('streamDigestDescrip1');\nvar streamDigestId2 = postman.getGlobalVariable('streamDigestId2');\nvar streamDigestDescrip2 = postman.getGlobalVariable('streamDigestDescrip2');\n}\n\nvar digestCount = postman.getGlobalVariable('digestCount');\n\ntests['digest count ' + digestCount ] = digestCount >= 0;\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431652836108,
					"name": "Digest count - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "825befed-09b2-187e-fccf-41ae125116e0",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}/inboxes?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 200);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var responseData = JSON.parse(responseBody);\nvar instanceId = postman.getGlobalVariable('instanceId');\nvar digestId = postman.getGlobalVariable('digestId');\nvar digestDescription = postman.getGlobalVariable('digestDescription');\nvar inboxCount = postman.getGlobalVariable('inboxCount');\nvar inboxId1 = postman.getGlobalVariable('streamInboxId1');\nvar inboxFamily1 = postman.getGlobalVariable('streamInboxFamily1');\nvar inboxName1 = postman.getGlobalVariable('streamInboxName1');\nvar inboxUrl1 = postman.getGlobalVariable('streamInboxURL1');\nvar inboxId2 = postman.getGlobalVariable('streamInboxId2');\nvar inboxFamily2 = postman.getGlobalVariable('streamInboxFamily2');\nvar inboxName2 = postman.getGlobalVariable('streamInboxName2');\nvar inboxUrl2 = postman.getGlobalVariable('streamInboxURL2');\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\nvar potentialErrorsMap = {\n    nf_digestId: 'Could not find digest with id ' + digestId,\n    nf_inboxId: 'Could not find inbox with id ' + inboxId1,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\n};\n\nfunction getExpectedErrors(errorTypes) {\n    var errorTypesArray = errorTypes.split(',');\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\n        return potentialErrorsMap[errorTypeKey]\n    })};\n}\n\ntests['Status code is correct'] = responseCode.code === statusCode;\n\nif(responseCode.code === 200){\n    if(inboxCount > 1){\n        var expected = {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId+ \"/inboxes\"\n            },\n            \"digest\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n            },\n            \"inbox-create\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\n            \"method\": \"POST\",\n            \"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n            }\n            },\n            \"count\": inboxCount,\n            \"digest\": {\n            \"description\": digestDescription,\n            \"digestId\": digestId\n            },\n            \"_embedded\": {\n            \"inboxes\": [\n            {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId2\n            },\n            \"inbox-commits\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId2 + \"/commits\",\n            \"method\": \"POST\"\n            }\n            },\n            \"inboxId\": inboxId2,\n            \"family\": inboxFamily2,\n            \"name\": inboxName2\n            },\n            {\n            \"_links\": {\n            \"self\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId1\n            },\n            \"inbox-commits\": {\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId1 + \"/commits\",\n            \"method\": \"POST\"\n            }\n            },\n            \"inboxId\": inboxId1,\n            \"family\": inboxFamily1,\n            \"name\": inboxName1\n            \n            }\n            ]\n            }\n        };\n        \n        if(inboxUrl1 != \"null\" && inboxUrl1 != \"undefined\"){\n            expected._embedded.inboxes[1].url = inboxUrl1\n        }\n        if(inboxUrl2 != \"null\" && inboxUrl2 != \"undefined\"){\n            expected._embedded.inboxes[0].url = inboxUrl2\n        }\n    }\n    if(inboxCount === 1){\n        var expected = {\n            \"_links\":{\n                \"self\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\"\n                    \n                },\n                \"digest\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n                    \n                },\n                \"inbox-create\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\n                    \"method\":\"POST\",\n                    \"title\":\"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n                }\n            },\n            \"count\": inboxCount,\n            \"digest\":{\n                \"description\":digestDescription,\n                \"digestId\": digestId\n            },\n            \"_embedded\":{\n                \"inboxes\":[\n                    {\n                        \"_links\":{\n                            \"self\":{\n                                \"href\":\"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId1\n                                \n                            },\n                            \"inbox-commits\":{\n                                \"href\":\"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId1 + \"/commits\",\n                                \"method\":\"POST\"\n                                \n                            }\n                            \n                        },\n                        \"inboxId\":inboxId1,\n                        \"family\":inboxFamily1,\n                        \"name\":inboxName1,\n                        \"url\":inboxUrl1\n                        \n                    }\n                ]\n                \n            }\n        };\n    }\n    if(inboxCount === 0){\n        var expected = {\n            \"_links\":{\n                \"self\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\"\n                    \n                },\n                \"digest\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n                    \n                },\n                \"inbox-create\":{\n                    \"href\":\"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\n                    \"method\":\"POST\",\n                    \"title\":\"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n                    \n                }\n                \n            },\n            \"count\":inboxCount,\n            \"digest\":{\n                \"description\":digestDescription,\n                \"digestId\":digestId\n                \n            },\n            \"_embedded\":{\n                \"inboxes\":[]\n                \n            }\n            \n        };\n\n    }\n\n    tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\");\n    tests['Inbox count is correct'] = inboxCount = responseData.count;\n    tests['Response Body is correct ' + JSON.stringify(expected)] = _.matches(expected)(responseData);\n}\nif(responseCode.code != 200){\n\n    tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === null;\n    tests['Response Body is correct'] = _.matches(expected)(responseData);\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431724709811,
					"name": "Get info about ALL inboxes - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "88f233df-697f-1cd7-4b68-de9f3710461f",
					"headers": "{{reqHeaderContentType}}: {{requestHeaderValue}}\n",
					"url": "{{rootURL}}/{{instanceId}}/digests?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('digestId', null);\npostman.setGlobalVariable('digestDescription', 'rainbows are awesome');\npostman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 201);\n\n",
					"pathVariables": {},
					"method": "POST",
					"data": "{\n  \"description\": \"{{digestDescription}}\"\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var responseData = JSON.parse(responseBody);\r\nvar apiKey = postman.getGlobalVariable('apiKey');\r\nvar instanceId = postman.getGlobalVariable('instanceId');\r\nvar digestDescription = postman.getGlobalVariable('digestDescription');\r\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\r\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\r\n\r\nvar potentialErrorsMap = {\r\n    e_descrip: 'A digest must contain a description.',\r\n    s_descrip: 'digest.description cannot contain script tags or HTML.',\r\n    i_descrip: 'digest.description does not meet minimum length of 1',\r\n    u_descrip: 'A digest description must not be null.',\r\n    x_descrip: 'digest.description does not meet maximum length of 140',\r\n    nf_digestId: 'Could not find a digest with id ' + digestId,\r\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\r\n    p_header: 'When issuing a POST to the CommitStream API, you must send a Content-Type: application/json header.',\r\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\r\n};\r\n\r\nfunction getExpectedErrors(errorTypes) {\r\n    var errorTypesArray = errorTypes.split(',');\r\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\r\n        return potentialErrorsMap[errorTypeKey]\r\n    })};\r\n}\r\n\r\ntests['Status code is correct'] = responseCode.code === statusCode;\r\n\r\nif(responseCode.code === 201) {\r\n    postman.setGlobalVariable(\"digestId\", responseData.digestId);\r\n    \r\n    var digestId = postman.getGlobalVariable('digestId');\r\n    var expected = {\r\n        \"_links\": {\r\n        \"self\": {\r\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\r\n        },\r\n        \"digests\": {\r\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\r\n        },\r\n        \"inbox-create\": {\r\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\r\n        \"method\": \"POST\",\r\n        \"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\r\n        },\r\n        \"inboxes\": {\r\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\"\r\n        }\r\n        },\r\n        \"description\": digestDescription,\r\n        \"digestId\": digestId\r\n        };\r\n    \r\n    tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\r\n    tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests/\" + digestId);\r\n    tests['Response Body is correct'] = _.matches(expected)(responseData);\r\n}\r\nif(responseCode.code != 201){\r\n    \r\n    tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\r\n    tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === null;\r\n    tests['Response Body is correct'] = _.matches(getExpectedErrors(errorTypes))(responseData);\r\n}",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431724622744,
					"name": "Create a digest - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "8e0a01a6-4068-1d24-6f30-eea4810e89ab",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}/commits?apiKey={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable(\"apiKey\", null);\n//postman.setGlobalVariable(\"instanceId\", null);\npostman.setGlobalVariable(\"statusCode\", 200);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var statusCode = parseInt(postman.getGlobalVariable('statusCode'));\r\nvar workItem = postman.getGlobalVariable('workItem');\r\n\r\ntests[\"Status code is correct\"] = responseCode.code === 200;\r\n\r\nif (responseCode.code === 200) {\r\n    var responseData = JSON.parse(responseBody);    \r\n\r\n    var expected = {\r\n      \"commits\":[\r\n        {\r\n          \"commitDate\":\"2014-10-03T14:58:14-04:00\",\r\n          \"timeFormatted\":\"7 months ago\",\r\n          \"author\":\"kunzimariano\",\r\n          \"sha1Partial\":\"p31d18\",\r\n          \"action\":\"committed\",\r\n          \"message\":\"Another commit is up!S-11111\",\r\n          \"commitHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo/commit/p31d188f0495feaf876e92573a5656700fd81e7x\",\r\n          \"repo\":\"kunzimariano/CommitService.DemoRepo\",\r\n          \"branch\":\"master\",\r\n          \"branchHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo/tree/master\",\r\n          \"repoHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo\"\r\n        },\r\n        {\r\n          \"commitDate\":\"2014-10-03T14:57:14-04:00\",\r\n          \"timeFormatted\":\"7 months ago\",\r\n          \"author\":\"kunzimariano\",\r\n          \"sha1Partial\":\"d31d17\",\r\n          \"action\":\"committed\",\r\n          \"message\":\"Sending a commit!S-11111\",\r\n          \"commitHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo/commit/d31d174f0495feaf876e92573a2121700fd81e7a\",\r\n          \"repo\":\"kunzimariano/CommitService.DemoRepo\",\r\n          \"branch\":\"master\",\r\n          \"branchHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo/tree/master\",\r\n          \"repoHref\":\"https://github.com/kunzimariano/CommitService.DemoRepo\"\r\n        }\r\n      ],\r\n      \"_links\":{\r\n    \r\n      }\r\n    };\r\n    \r\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\r\n    tests['Response Body contains work item: ' + workItem + \" and message: \" + JSON.stringify(responseData.commits[5].message)] = _.includes(responseData.commits[0].message, workItem);    \r\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\r\n}\r\n\r\n\r\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431725855599,
					"name": "Get digest commits",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "8c9c3b96-c523-576e-db80-690dedf973e4"
				},
				{
					"id": "a5b63b74-716f-280d-e2cb-003e4d098fef",
					"headers": "Content-Type: application/json\n",
					"url": "{{rootURL}}/inboxes?key={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable(\"inboxId\", null);\npostman.setGlobalVariable(\"inboxFamily\", null);\npostman.setGlobalVariable(\"inboxName\", null);\npostman.setGlobalVariable(\"inboxURL\", null);",
					"pathVariables": {},
					"method": "POST",
					"data": "{\r\n  \"digestId\": \"{{digestId}}\",\r\n  \"family\": \"GitHub\",\r\n  \"name\": \"Drive fast\",\r\n  \"url\": \"http://github.com/somewhere\"\r\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var digestId = postman.getGlobalVariable(\"digestId\");\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable(\"inboxId\", responseData.inboxId);\nvar inboxId = postman.getGlobalVariable(\"inboxId\");\nvar expected = {\n\"_links\": {\n\"self\": {\n\"href\": \"http://localhost:6565/api/inboxes/\" + inboxId\n},\n\"add-commit\": {\n\"href\": \"http://localhost:6565/api/inboxes/\" + inboxId + \"/commits\"\n}\n},\n\"inboxId\": inboxId\n};\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\ntests[\"Create Inbox Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\ntests[\"Create Inbox Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/inboxes/\" + inboxId);\n//tests[\"Create Inbox Response Body is correct\"] = _.matches(expected)(responseData);\n\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429035384584,
					"name": "Create an inbox for a digest",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "190f176e-2c29-3610-a706-7773f35d20d2"
				},
				{
					"id": "b450a087-159d-63a0-94b2-abe45ce0578a",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 400);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar digestId = postman.getGlobalVariable('digestId');\nvar digestDescription = postman.getGlobalVariable('digestDescription');\nvar responseData = JSON.parse(responseBody);\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\nvar potentialErrorsMap = {\n    nf_digestId: 'Could not find digest with id ' + digestId1,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\n};\n\nfunction getExpectedErrors(errorTypes) {\n    var errorTypesArray = errorTypes.split(',');\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\n        return potentialErrorsMap[errorTypeKey]\n    })};\n}\n\ntests['Status code is correct'] = responseCode.code === statusCode;\n\nif(responseCode.code === 200){\n    var expected = {\n        \"_links\": {\n        \"self\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n        },\n        \"digests\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n        },\n        \"inbox-create\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\n        \"method\": \"POST\",\n        \"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n        },\n        \"inboxes\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\"\n        }\n        },\n        \"description\": digestDescription,\n        \"digestId\": digestId\n        };\n\n    tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests/\" + digestId);\n    tests['Response Body is correct'] = _.matches(expected)(responseData);\n}\nif(responseCode.code != 200){\n    var expectedNullDigestId = {\"errors\":[\"The value null is not a valid identifier for digests\"]};\n    \n    tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === null;\n    tests['Response Body is correct'] = _.matches(getExpectedErrors(errorTypes))(responseData);\n}\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431653041392,
					"name": "Get info about a digest - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "b7ce7098-23e1-0fa8-b40f-7cc04c094430",
					"headers": "Content-Type: {{requestHeaderContentType}}\n",
					"url": "{{rootURL}}/digests?key={{apiKey}}",
					"preRequestScript": "//postman.setGlobalVariable(\"apiKey\", null);\npostman.setGlobalVariable(\"digestId\", null);\n//postman.setGlobalVariable(\"digestDescription\", null);\n",
					"pathVariables": {},
					"method": "POST",
					"data": "{\n  \"description\": \"{{digestDescription}}\"\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(responseCode.code === 201) {\n    var responseData = JSON.parse(responseBody);\n    postman.setGlobalVariable(\"digestId\", responseData.digestId);\n    \n    var digestId = postman.getGlobalVariable('digestId');\n    var expected = {\n    \"_links\": {\n    \"self\": {\n    \"href\": \"http://localhost:6565/api/digests/\" + digestId\n    },\n    \"digests\": {\n    \"href\": \"http://localhost:6565/api/digests\"\n    },\n    \"inbox-create\": {\n    \"href\": \"http://localhost:6565/api/inboxes\",\n    \"method\": \"POST\",\n    \"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\n    }\n    },\n    \"digestId\": digestId\n    };\n    \n    tests[\"Create Digest status code is correct \" + responseCode.code] = responseCode.code === 201;\n    tests[\"Create Digest Response Header is correct \" + postman.getGlobalVariable(\"digestResponseHeaderContentType\")] = postman.getResponseHeader(\"Content-Type\").startsWith(postman.getGlobalVariable(\"digestResponseHeaderContentType\"));\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/digests/\" + digestId);\n    tests[\"Create Digest Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(responseCode.code === 400){\n    var expectedDescrip = \"A digest description must contain a value.\";\n    var expectedScript = \"A digest description cannot contain script tags or HTML.\"\n    var requestLength = postman.getGlobalVariable(\"digestDescription\").length;\n    var expectedChar = \"A digest description cannot contain more than 140 characters. The description you submitted contains \" + requestLength + \" characters.\"\n    var expectedNull = \"A digest description must not be null.\";\n    var expectedBadDescrip = \"A digest must contain a description.\";\n    var expectedNoDesripLabel = \"SyntaxError: Unexpected token\";\n    \n    tests[\"Create Digest with bad request body status code is correct \" + responseCode.code] = responseCode.code === 400;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    if(responseData.includes(\"tags\")){\n        tests[\"Response body is error message \" + expectedScript] = responseData === expectedScript;\n    }\n    if(responseData.includes(\"value\")){\n        tests[\"Response body is error message \" + expectedDescrip] = responseData === expectedDescrip;\n    }\n    if(responseData.includes(\"140\")){\n        tests[\"Response body is error message \" + expectedChar] = responseData === expectedChar;\n    }\n    if(responseData.includes(\"null\")){\n        tests[\"Response body is error message \" + expectedNull] = responseData === expectedNull;\n    }\n    if(responseData === expectedBadDescrip){\n        tests[\"Response body is error message \" + expectedBadDescrip] = responseData === expectedBadDescrip;\n    }\n    if(responseData.includes(\"SyntaxError\")){\n        tests[\"Response body is error message \" + expectedNoDesripLabel] = responseData.startsWith(expectedNoDesripLabel);\n    }\n}\nif(responseCode.code === 401){\n    var expected = \"API key parameter missing or invalid\";\n    \n    tests[\"Create Digest with bad or missing apiKey status code is correct \" + responseCode.code] = responseCode.code === 401;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response body is error message \" + expected] = responseData === expected;\n}\nif(responseCode.code === 415){\n    var expected = \"When creating a digest, you must send a Content-Type: application/json header.\";\n    \n    tests[\"Create Digest with bad or missing apiKey status code is correct \" + responseCode.code] = responseCode.code === 415;\n    tests[\"Create Digest Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n    tests[\"Create Digest Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n    tests[\"Response body is error message \" + expected] = responseData === expected;\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429816726846,
					"name": "Create a second digest",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "190f176e-2c29-3610-a706-7773f35d20d2"
				},
				{
					"id": "bdcae0e3-e7c0-525e-5826-5afd5ef62abc",
					"headers": "",
					"url": "{{rootURL}}/instances?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('apiKey', null);\npostman.setGlobalVariable('instanceId', null);\npostman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 201);",
					"pathVariables": {},
					"method": "POST",
					"data": "",
					"dataMode": "raw",
					"version": 2,
					"tests": "var responseData = JSON.parse(responseBody);\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\ntests['Status code is correct'] = responseCode.code = statusCode;\n\nif(responseCode.code === 201){\npostman.setGlobalVariable(\"apiKey\", responseData.apiKey);\npostman.setGlobalVariable(\"instanceId\", responseData.instanceId);\n\nvar apiKey = postman.getGlobalVariable('apiKey');\nvar instanceId = postman.getGlobalVariable('instanceId');\nvar expected = {\n    \"_links\":{\n        \"self\":{\n            \"href\": \"http://localhost:6565/api/instances/\" + instanceId\n        },\n        \"digests\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n        },\n        \"digest-create\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\",\n            \"method\": \"POST\",\n            \"title\": \"Endpoint for creating a digest on instance \" + instanceId + \".\"\n        }\n    },\n    \"instanceId\": instanceId,\n    \"apiKey\": apiKey\n    };\n\ntests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\ntests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/instances/\" + instanceId);\ntests['Response is correct'] = _.matches(expected)(responseData);\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431724581545,
					"name": "Create an instance - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "be7ce4eb-d361-98a8-c257-75612b25c831",
					"headers": "Content-Type: application/json\n",
					"url": "{{rootURL}}/inboxes?key={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable(\"inboxId\", null);\npostman.setGlobalVariable(\"inboxFamily\", null);\npostman.setGlobalVariable(\"inboxName\", null);\npostman.setGlobalVariable(\"inboxURL\", null);",
					"pathVariables": {},
					"method": "POST",
					"data": "{\r\n  \"digestId\": \"{{digestId}}\",\r\n  \"family\": \"GitHub\",\r\n  \"name\": \"Drive fast\",\r\n  \"url\": \"http://github.com/somewhere\"\r\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var digestId = postman.getGlobalVariable(\"digestId\");\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable(\"inboxId\", responseData.inboxId);\nvar inboxId = postman.getGlobalVariable(\"inboxId\");\nvar expected = {\n\"_links\": {\n\"self\": {\n\"href\": \"http://localhost:6565/api/inboxes/\" + inboxId\n},\n\"add-commit\": {\n\"href\": \"http://localhost:6565/api/inboxes/\" + inboxId + \"/commits\"\n}\n},\n\"inboxId\": inboxId\n};\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\ntests[\"Create Inbox Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\ntests[\"Create Inbox Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/inboxes/\" + inboxId);\n//tests[\"Create Inbox Response Body is correct\"] = _.matches(expected)(responseData);\n\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429035384584,
					"name": "Create an inbox for a digest copy",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"write": true,
					"folder": "190f176e-2c29-3610-a706-7773f35d20d2",
					"synced": true,
					"owner": 0
				},
				{
					"id": "c16ba3db-7f50-c174-fade-b49c880ceed8",
					"headers": "{{reqHeaderContentType}}: {{requestHeaderValue}}\n",
					"url": "{{rootURL}}/{{instanceId}}/digests/{{digestId}}/inboxes?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('requestHeaderValue', 'application/json');\npostman.setGlobalVariable('inboxId', null);\npostman.setGlobalVariable('inboxFamily', 'GitHub');\npostman.setGlobalVariable('inboxName', 'somename');\npostman.setGlobalVariable('inboxURL', 'http://noted.com');\npostman.setGlobalVariable('errorTypes', 'r_name');\npostman.setGlobalVariable('statusCode', 201);",
					"pathVariables": {},
					"method": "POST",
					"data": "{\r\n    \"family\": \"{{inboxFamily}}\",\r\n    \"name\": \"{{inboxName}}\",\r\n    \"url\": \"{{inboxURL}}\"\r\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var digestId = postman.getGlobalVariable(\"digestId\");\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable(\"inboxId\", responseData.inboxId);\nvar inboxId = postman.getGlobalVariable(\"inboxId\");\nvar inboxName = postman.getGlobalVariable(\"inboxName\");\nvar inboxFamily = postman.getGlobalVariable(\"inboxFamily\");\nvar inboxURL = postman.getGlobalVariable(\"inboxURL\");\nvar instanceId = postman.getGlobalVariable(\"instanceId\");\nvar digestId = postman.getGlobalVariable(\"digestId\");\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\n\nvar potentialErrorsMap = {\n    r_name: 'inbox requires property \"name\"', \n    r_family: 'inbox requires property \"family\"',\n    e_family: 'inbox.family is not one of enum values: GitHub',\n    s_name: 'inbox.name cannot contain script tags or HTML.',\n    s_url: 'inbox.url cannot contain script tags or HTML.',\n    s_family: 'inbox.family cannot contain script tags or HTML.',\n    i_name: 'inbox.name does not meet the minimum length of 3',\n    x_name: 'inbox.name does not meet the maximum length of 140',\n    i_digestId: 'inbox.digestId does not meet the minimum length of 36',\n    i_url: 'inbox.url does not meet the minimum length of 10',\n    x_url: 'inbox.url does not meet the maximum length of 2000',\n    nf_digestId: 'Could not find a digest with id ' + digestId,\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\n    p_header: 'When issuing a POST to the CommitStream API, you must send a Content-Type: application/json header.',\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\n};\n\nfunction getExpectedErrors(errorTypes) {\n    var errorTypesArray = errorTypes.split(',');\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\n        return potentialErrorsMap[errorTypeKey]\n    })};\n}\n\ntests[\"Status code is correct\"] = responseCode.code === statusCode;\n\nif(responseCode.code === 201) {\n    postman.setGlobalVariable(\"inboxId\", responseData.inboxId);\n    var inboxId = responseData.inboxId;\n    \n    var digestId = postman.getGlobalVariable('digestId');\n        if(inboxURL === \"null\"){\n            var expected = {\n            \"_links\":{\n            \"self\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId\n            },\n            \"digest-parent\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n            },\n            \"add-commit\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n            }\n            },\n            \"inboxId\": inboxId,\n            \"family\": inboxFamily,\n            \"name\": inboxName\n            };\n        }\n        else {\n            var expected = {\n            \"_links\":{\n            \"self\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId\n            },\n            \"digest-parent\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\n            },\n            \"add-commit\":{\n            \"href\": \"http://localhost:6565/api/\" + instanceId + \"/inboxes/\" + inboxId + \"/commits\"\n            }\n            },\n            \"inboxId\": inboxId,\n            \"family\": inboxFamily,\n            \"name\": inboxName,\n            \"url\": inboxURL\n            };\n            \n            tests[\"InboxURL contains http\"] = postman.getGlobalVariable(\"inboxURL\").startsWith(\"http\");\n        }\n        \n        tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n        tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/inboxes/\" + inboxId);\n        tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\n        \nif(responseCode.code != 201){\n        tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\n        tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\n        tests[\"Response Body is correct\"] = _.matches(getExpectedErrors(errorTypes))(responseData);\n}       \n\n\n\n\n\n\n\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1432234245840,
					"name": "Create an inbox for a digest - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": []
				},
				{
					"id": "c1c7d722-f1eb-7029-aa2c-45c37a9b23cb",
					"headers": "Authorization: Basic YWRtaW46Y2hhbmdlaXQ=\nAccept: application/json\n",
					"url": "http://localhost:2113/streams/digestInbox-{{digestId}}?embed=content",
					"preRequestScript": "postman.setGlobalVariable('inboxCount', null);\npostman.setGlobalVariable('streamInboxId1', null);\npostman.setGlobalVariable('streamInboxId2', null);\npostman.setGlobalVariable('streamInboxFamily1', null);\npostman.setGlobalVariable('streamInboxFamily2', null);\npostman.setGlobalVariable('streamInboxName1', null);\npostman.setGlobalVariable('streamInboxName2', null);\npostman.setGlobalVariable('streamInboxURL1', null);\npostman.setGlobalVariable('streamInboxURL2', null);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(_.isEmpty(responseData)){\n    postman.setGlobalVariable('inboxCount', 0);\n}\nelse {\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable('inboxCount', responseData.entries.length);\npostman.setGlobalVariable('streamInboxId1', responseData.entries[0].content.data.inboxId);\npostman.setGlobalVariable('streamInboxFamily1', responseData.entries[0].content.data.family);\npostman.setGlobalVariable('streamInboxName1', responseData.entries[0].content.data.name);\npostman.setGlobalVariable('streamInboxURL1', responseData.entries[0].content.data.url);\npostman.setGlobalVariable('streamInboxId2', responseData.entries[1].content.data.inboxId);\npostman.setGlobalVariable('streamInboxFamily2', responseData.entries[1].content.data.family);\npostman.setGlobalVariable('streamInboxName2', responseData.entries[1].content.data.name);\npostman.setGlobalVariable('streamInboxURL2', responseData.entries[1].content.data.url);\n\nvar streamInboxId1 = postman.getGlobalVariable('streamInboxId1');\nvar streamInboxFamily1 = postman.getGlobalVariable('streamInboxFamily1');\nvar streamInboxName1 = postman.getGlobalVariable('streamInboxName1');\nvar streamInboxURL1 = postman.getGlobalVariable('streamInboxURL1');\nvar streamInboxId2 = postman.getGlobalVariable('streamInboxId2');\nvar streamInboxFamily2 = postman.getGlobalVariable('streamInboxFamily2');\nvar streamInboxName2 = postman.getGlobalVariable('streamInboxName2');\nvar streamInboxURL2 = postman.getGlobalVariable('streamInboxURL2');\n}\n\nvar inboxCount = postman.getGlobalVariable('inboxCount');\n\ntests[\"inbox count \" + inboxCount] = inboxCount >= 0;\n",
					"currentHelper": "basicAuth",
					"helperAttributes": {
						"username": "admin",
						"password": "changeit",
						"id": "basic",
						"timestamp": 1429887720276
					},
					"time": 1430429216488,
					"name": "Inbox count",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"write": true,
					"folder": "c51dd647-b2bc-6fbb-5586-82513c554e60",
					"synced": true,
					"isFromCollection": true,
					"collectionRequestId": "c1c7d722-f1eb-7029-aa2c-45c37a9b23cb",
					"owner": 0
				},
				{
					"id": "c7537742-8132-504b-25c5-2ebdcd9a8107",
					"headers": "",
					"url": "{{rootURL}}/{{instanceId}}/digests?apiKey={{apiKey}}",
					"preRequestScript": "",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var instanceId = postman.getGlobalVariable('instanceId');\nvar digestId1 = postman.getGlobalVariable('streamDigestId1');\nvar digestId2 = postman.getGlobalVariable('streamDigestId2');\nvar digestCount = parseInt(postman.getGlobalVariable('digestCount'));\nvar digestDescription1 = postman.getGlobalVariable('streamDigestDescrip1');\nvar digestDescription2 = postman.getGlobalVariable('streamDigestDescrip2');\n\nvar responseData = JSON.parse(responseBody);\nif(digestCount > 0){\n    var expected = {\n        \"_links\": {\n        \"self\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n        }\n        },\n        \"count\": digestCount,\n        \"_embedded\": {\n        \"digests\": [\n        {\n        \"_links\": {\n        \"self\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId1\n        }\n        },\n        \"digestId\": digestId1,\n        \"description\": digestDescription1\n        },\n        {\n        \"_links\": {\n        \"self\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId2\n        }\n        },\n        \"digestId\": digestId2,\n        \"description\": digestDescription1\n        }\n        ]\n        }\n        };\n    \n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Instance Location Header is correct\" ] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests\");\n    tests[\"Digest count is correct\"] = digestCount === responseData.count;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n}\nif(digestCount === 0){\n    var expected = {\n        \"_links\": {\n        \"self\": {\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n        }\n        },\n        \"count\": digestCount,\n        \"_embedded\": {\n        \"digests\": [ ]\n        }\n        };\n\n\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/hal+json\");\n    tests[\"Instance Location Header is correct\" ] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests\");\n    tests[\"Digest count is correct\"] = digestCount === responseData.count;\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\n\n}\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429821008175,
					"name": "Get info about ALL digests",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "190f176e-2c29-3610-a706-7773f35d20d2"
				},
				{
					"id": "dd846cb9-8a6f-f39b-34af-c037b020a2a1",
					"headers": "Authorization: Basic YWRtaW46Y2hhbmdlaXQ=\nAccept: application/json\n",
					"url": "http://localhost:2113/streams/digestInbox-{{digestId}}?embed=content",
					"preRequestScript": "postman.setGlobalVariable('inboxCount', null);\npostman.setGlobalVariable('streamInboxId1', null);\npostman.setGlobalVariable('streamInboxId2', null);\npostman.setGlobalVariable('streamInboxFamily1', null);\npostman.setGlobalVariable('streamInboxFamily2', null);\npostman.setGlobalVariable('streamInboxName1', null);\npostman.setGlobalVariable('streamInboxName2', null);\npostman.setGlobalVariable('streamInboxURL1', null);\npostman.setGlobalVariable('streamInboxURL2', null);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(_.isEmpty(responseData)){\n    postman.setGlobalVariable('inboxCount', 0);\n}\nelse {\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable('inboxCount', responseData.entries.length);\npostman.setGlobalVariable('streamInboxId1', responseData.entries[0].content.data.inboxId);\npostman.setGlobalVariable('streamInboxFamily1', responseData.entries[0].content.data.family);\npostman.setGlobalVariable('streamInboxName1', responseData.entries[0].content.data.name);\npostman.setGlobalVariable('streamInboxURL1', responseData.entries[0].content.data.url);\npostman.setGlobalVariable('streamInboxId2', responseData.entries[1].content.data.inboxId);\npostman.setGlobalVariable('streamInboxFamily2', responseData.entries[1].content.data.family);\npostman.setGlobalVariable('streamInboxName2', responseData.entries[1].content.data.name);\npostman.setGlobalVariable('streamInboxURL2', responseData.entries[1].content.data.url);\n\nvar streamInboxId1 = postman.getGlobalVariable('streamInboxId1');\nvar streamInboxFamily1 = postman.getGlobalVariable('streamInboxFamily1');\nvar streamInboxName1 = postman.getGlobalVariable('streamInboxName1');\nvar streamInboxURL1 = postman.getGlobalVariable('streamInboxURL1');\nvar streamInboxId2 = postman.getGlobalVariable('streamInboxId2');\nvar streamInboxFamily2 = postman.getGlobalVariable('streamInboxFamily2');\nvar streamInboxName2 = postman.getGlobalVariable('streamInboxName2');\nvar streamInboxURL2 = postman.getGlobalVariable('streamInboxURL2');\n}\n\nvar inboxCount = postman.getGlobalVariable('inboxCount');\n\ntests[\"inbox count \" + inboxCount] = inboxCount >= 0;\n",
					"currentHelper": "basicAuth",
					"helperAttributes": {
						"username": "admin",
						"password": "changeit",
						"id": "basic",
						"timestamp": 1429887720276
					},
					"time": 1430429216488,
					"name": "Inbox count - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "e081fd2b-c83d-fddc-739e-27bb54296a8c",
					"headers": "",
					"url": "{{rootURL}}/instances/{{instanceId}}?apiKey={{apiKey}}",
					"preRequestScript": "",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "\nvar responseData = responseBody;\nvar apiKey = postman.getGlobalVariable('apiKey');\nvar instanceId = postman.getGlobalVariable('instanceId');\n\nif(responseCode.code === 200){\n    var responseData = JSON.parse(responseBody);\n    var expected = {\n        \"_links\":{\n            \"self\":{\n                \"href\": \"http://localhost:6565/api/instances/\" + instanceId\n            },\n            \"digests\":{\n                \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n            },\n            \"digest-create\":{\n                \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\",\n                \"method\": \"POST\",\n                \"title\": \"Endpoint for creating a digest on instance \" + instanceId + \".\"\n            }\n        },\n        \"instanceId\": instanceId,\n        \"apiKey\": apiKey\n        };\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"GET Instance Response Header is correct \" + postman.getGlobalVariable(\"responseHeaderContentType\")] = postman.getResponseHeader(\"Content-Type\").startsWith(postman.getGlobalVariable(\"responseHeaderContentType\"));\n    tests[\"GET Instance Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/instances/\" + instanceId);\n    tests[\"GET Response Body is correct\"] = _.matches(expected)(responseData);\n}\n\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429802713730,
					"name": "GET details for an instance",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "bc8836c9-b43c-e8da-db41-3bfd310851f1"
				},
				{
					"id": "f4b04476-f205-6efb-946f-403a9dc2e707",
					"headers": "Authorization: Basic YWRtaW46Y2hhbmdlaXQ=\nAccept: application/json\n",
					"url": "http://localhost:2113/streams/digests-{{instanceId}}?embed=content",
					"preRequestScript": "postman.setGlobalVariable('digestCount', null);\npostman.setGlobalVariable('streamDigestId1', null);\npostman.setGlobalVariable('streamDigestId2', null);\npostman.setGlobalVariable('streamDigestDescrip1', null);\npostman.setGlobalVariable('streamDigestDescrip2', null);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(_.isEmpty(responseData)){\n    postman.setGlobalVariable('digestCount', 0);\n}\nelse {\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable('digestCount', responseData.entries.length);\npostman.setGlobalVariable('streamDigestId1', responseData.entries[0].content.data.digestId);\npostman.setGlobalVariable('streamDigestDescrip1', responseData.entries[0].content.data.description);\npostman.setGlobalVariable('streamDigestId2', responseData.entries[1].content.data.digestId);\npostman.setGlobalVariable('streamDigestDescrip2', responseData.entries[1].content.data.description);\n\nvar streamDigestId1 = postman.getGlobalVariable('streamDigestId1');\nvar streamDigestDescrip1 = postman.getGlobalVariable('streamDigestDescrip1');\nvar streamDigestId2 = postman.getGlobalVariable('streamDigestId2');\nvar streamDigestDescrip2 = postman.getGlobalVariable('streamDigestDescrip2');\n}\n\nvar digestCount = postman.getGlobalVariable('digestCount');\n\ntests[\"digest count \" + digestCount ] = digestCount >= 0;\n",
					"currentHelper": "basicAuth",
					"helperAttributes": {
						"username": "admin",
						"password": "changeit",
						"id": "basic",
						"timestamp": 1429887720276
					},
					"time": 1430425095229,
					"name": "Digest count - csv copy",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "f4fbed3e-2809-eb23-a60d-28469fc302de",
					"headers": "Authorization: Basic YWRtaW46Y2hhbmdlaXQ=\nAccept: application/json\n",
					"url": "http://localhost:2113/streams/digests-{{instanceId}}?embed=content",
					"preRequestScript": "postman.setGlobalVariable('digestCount', null);\npostman.setGlobalVariable('streamDigestId1', null);\npostman.setGlobalVariable('streamDigestId2', null);\npostman.setGlobalVariable('streamDigestDescrip1', null);\npostman.setGlobalVariable('streamDigestDescrip2', null);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(_.isEmpty(responseData)){\n    postman.setGlobalVariable('digestCount', 0);\n}\n\nif(digestCount > 0){\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable('streamDigestId1', responseData.entries[0].content.data.digestId);\npostman.setGlobalVariable('streamDigestDescrip1', responseData.entries[0].content.data.description);\npostman.setGlobalVariable('streamDigestId2', responseData.entries[1].content.data.digestId);\npostman.setGlobalVariable('streamDigestDescrip2', responseData.entries[1].content.data.description);\npostman.setGlobalVariable('digestCount', responseData.entries.length);\n\nvar streamDigestId1 = postman.getGlobalVariable('streamDigestId1');\nvar streamDigestDescrip1 = postman.getGlobalVariable('streamDigestDescrip1');\nvar streamDigestId2 = postman.getGlobalVariable('streamDigestId2');\nvar streamDigestDescrip2 = postman.getGlobalVariable('streamDigestDescrip2');\n}\n\nvar digestCount = postman.getGlobalVariable('digestCount');\n\n//tests[\"digest count\" ] = digestCount === 2;\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1429821223783,
					"name": "Digest count",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "190f176e-2c29-3610-a706-7773f35d20d2"
				},
				{
					"id": "f5f8b4fc-eff3-be34-345b-956e57ab9696",
					"headers": "",
					"url": "{{rootURL}}/instances/{{instanceId}}?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 400);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "\nvar responseData = responseBody;\nvar apiKey = postman.getGlobalVariable('apiKey');\nvar instanceId = postman.getGlobalVariable('instanceId');\nvar statusCode = parseInt(postman.getGlobalVariabel('statusCode'));\n\ntests['Status code is correct'] = responseCode.code = statusCode;\nif(responseCode.code === 200){\n    var responseData = JSON.parse(responseBody);\n    var expected = {\n        \"_links\":{\n            \"self\":{\n                \"href\": \"http://localhost:6565/api/instances/\" + instanceId\n            },\n            \"digests\":{\n                \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\n            },\n            \"digest-create\":{\n                \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\",\n                \"method\": \"POST\",\n                \"title\": \"Endpoint for creating a digest on instance \" + instanceId + \".\"\n            }\n        },\n        \"instanceId\": instanceId,\n        \"apiKey\": apiKey\n        };\n    \n    tests['Response Header is correct'] = postman.getResponseHeader(\"Content-Type\").startsWith(postman.getGlobalVariable(\"responseHeaderContentType\"));\n    tests['Location Header is correct'] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/instances/\" + instanceId);\n    tests['Response Body is correct'] = _.matches(expected)(responseData);\n}\n\n\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431652820412,
					"name": "GET details for an instance - csv",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "fb7c1689-6a0e-6c37-a6cf-64b77e861d49",
					"headers": "{{reqHeaderContentType}}: {{requestHeaderValue}}\n",
					"url": "{{rootURL}}/{{instanceId}}/digests?apiKey={{apiKey}}",
					"preRequestScript": "postman.setGlobalVariable('digestId', null);\npostman.setGlobalVariable('digestDescription', 'more awesomer digest!');\npostman.setGlobalVariable('errorTypes', 's_descrip');\npostman.setGlobalVariable('statusCode', 400);\n\n",
					"pathVariables": {},
					"method": "POST",
					"data": "{\n  \"description\": \"{{digestDescription}}\"\n}",
					"dataMode": "raw",
					"version": 2,
					"tests": "var responseData = JSON.parse(responseBody);\r\nvar apiKey = postman.getGlobalVariable('apiKey');\r\nvar instanceId = postman.getGlobalVariable('instanceId');\r\nvar digestDescription = postman.getGlobalVariable('digestDescription');\r\nvar errorTypes = postman.getGlobalVariable(\"errorTypes\");\r\nvar statusCode = parseInt(postman.getGlobalVariable('statusCode'));\r\n\r\nvar potentialErrorsMap = {\r\n    e_descrip: 'A digest must contain a description.',\r\n    s_descrip: 'digest.description cannot contain script tags or HTML.',\r\n    i_descrip: 'digest.description does not meet minimum length of 1',\r\n    u_descrip: 'A digest description must not be null.',\r\n    x_descrip: 'digest.description does not meet maximum length of 140',\r\n    nf_digestId: 'Could not find a digest with id ' + digestId,\r\n    nf_instanceId: 'Could not find instance with id ' + instanceId,\r\n    p_header: 'When issuing a POST to the CommitStream API, you must send a Content-Type: application/json header.',\r\n    inv_apiKey: 'Invalid apiKey for instance ' + instanceId\r\n};\r\n\r\nfunction getExpectedErrors(errorTypes) {\r\n    var errorTypesArray = errorTypes.split(',');\r\n    return {errors: _.map(errorTypesArray, function(errorTypeKey) {\r\n        return potentialErrorsMap[errorTypeKey]\r\n    })};\r\n}\r\n\r\ntests[\"Status code is correct\"] = responseCode.code === statusCode;\r\n\r\nif(responseCode.code === 201) {\r\n    postman.setGlobalVariable(\"digestId\", responseData.digestId);\r\n    \r\n    var digestId = postman.getGlobalVariable('digestId');\r\n    var expected = {\r\n        \"_links\": {\r\n        \"self\": {\r\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId\r\n        },\r\n        \"digests\": {\r\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests\"\r\n        },\r\n        \"inbox-create\": {\r\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\",\r\n        \"method\": \"POST\",\r\n        \"title\": \"Endpoint for creating an inbox for a repository on digest \" + digestId + \".\"\r\n        },\r\n        \"inboxes\": {\r\n        \"href\": \"http://localhost:6565/api/\" + instanceId + \"/digests/\" + digestId + \"/inboxes\"\r\n        }\r\n        },\r\n        \"description\": digestDescription,\r\n        \"digestId\": digestId\r\n        };\r\n    \r\n    tests[\"Response Header is correct \" + postman.getGlobalVariable(\"responseHeaderContentType\")] = postman.getResponseHeader(\"Content-Type\").startsWith(postman.getGlobalVariable(\"responseHeaderContentType\"));\r\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === (postman.getGlobalVariable(\"rootURL\") + \"/\" + instanceId + \"/digests/\" + digestId);\r\n    tests[\"Response Body is correct\"] = _.matches(expected)(responseData);\r\n}\r\nif(responseCode.code != 201){\r\n    \r\n    tests[\"Response Header is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith(\"application/json\");\r\n    tests[\"Location Header is correct\"] = postman.getResponseHeader(\"Location\") === null;\r\n    tests[\"Response Body is correct\"] = _.matches(getExpectedErrors(errorTypes))(responseData);\r\n}",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431652266249,
					"name": "Create a second digest - csv copy",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"owner": 0,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075"
				},
				{
					"id": "fdc1dcd8-3a9f-e714-d2b8-1aa2f7952759",
					"headers": "Authorization: Basic YWRtaW46Y2hhbmdlaXQ=\nAccept: application/json\n",
					"url": "http://localhost:2113/streams/digestInbox-{{digestId}}?embed=content",
					"preRequestScript": "postman.setGlobalVariable('inboxCount', null);\npostman.setGlobalVariable('streamInboxId1', null);\npostman.setGlobalVariable('streamInboxId2', null);\npostman.setGlobalVariable('streamInboxFamily1', null);\npostman.setGlobalVariable('streamInboxFamily2', null);\npostman.setGlobalVariable('streamInboxName1', null);\npostman.setGlobalVariable('streamInboxName2', null);\npostman.setGlobalVariable('streamInboxURL1', null);\npostman.setGlobalVariable('streamInboxURL2', null);",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "var responseData = responseBody;\nif(_.isEmpty(responseData)){\n    postman.setGlobalVariable('inboxCount', 0);\n}\nelse {\nvar responseData = JSON.parse(responseBody);\npostman.setGlobalVariable('inboxCount', responseData.entries.length);\npostman.setGlobalVariable('streamInboxId1', responseData.entries[0].content.data.inboxId);\npostman.setGlobalVariable('streamInboxFamily1', responseData.entries[0].content.data.family);\npostman.setGlobalVariable('streamInboxName1', responseData.entries[0].content.data.name);\npostman.setGlobalVariable('streamInboxURL1', responseData.entries[0].content.data.url);\npostman.setGlobalVariable('streamInboxId2', responseData.entries[1].content.data.inboxId);\npostman.setGlobalVariable('streamInboxFamily2', responseData.entries[1].content.data.family);\npostman.setGlobalVariable('streamInboxName2', responseData.entries[1].content.data.name);\npostman.setGlobalVariable('streamInboxURL2', responseData.entries[1].content.data.url);\n\nvar streamInboxId1 = postman.getGlobalVariable('streamInboxId1');\nvar streamInboxFamily1 = postman.getGlobalVariable('streamInboxFamily1');\nvar streamInboxName1 = postman.getGlobalVariable('streamInboxName1');\nvar streamInboxURL1 = postman.getGlobalVariable('streamInboxURL1');\nvar streamInboxId2 = postman.getGlobalVariable('streamInboxId2');\nvar streamInboxFamily2 = postman.getGlobalVariable('streamInboxFamily2');\nvar streamInboxName2 = postman.getGlobalVariable('streamInboxName2');\nvar streamInboxURL2 = postman.getGlobalVariable('streamInboxURL2');\n}\n\nvar inboxCount = postman.getGlobalVariable('inboxCount');\n\ntests[\"inbox count \" + inboxCount] = inboxCount >= 0;\n",
					"currentHelper": "basicAuth",
					"helperAttributes": {
						"username": "admin",
						"password": "changeit",
						"id": "basic",
						"timestamp": 1429887720276
					},
					"time": 1430429216488,
					"name": "Inbox count - csv copy",
					"description": "",
					"collectionId": "078e1998-9164-d802-84db-3387328fe19f",
					"responses": [],
					"write": true,
					"folder": "fdd97ecd-cfec-024a-7100-8ea16e442075",
					"synced": true,
					"owner": 0
				}
			]
		},
		{
			"id": "956d4535-63e2-ca26-5bce-fe21516f9d9c",
			"name": "HACK",
			"description": "",
			"order": [
				"f4898fec-a2ae-a25c-1849-92093c8c7455",
				"eff820fb-0fdf-d4e5-1cc3-e85c0771587b"
			],
			"folders": [],
			"timestamp": 1430503420378,
			"synced": false,
			"remote_id": 0,
			"owner": 0,
			"sharedWithTeam": false,
			"subscribed": false,
			"remoteLink": "",
			"public": false,
			"write": true,
			"hasRequests": true,
			"requests": [
				{
					"id": "eff820fb-0fdf-d4e5-1cc3-e85c0771587b",
					"headers": "",
					"url": "http://www.google.com",
					"preRequestScript": "",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "tests['valid integer 4'] = 4 === 4;\ntests['valid name'] = 'V1' === 'V1';\n",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431097885097,
					"name": "A sample story at Story:54874",
					"description": "",
					"collectionId": "956d4535-63e2-ca26-5bce-fe21516f9d9c",
					"responses": [],
					"owner": 0
				},
				{
					"id": "f4898fec-a2ae-a25c-1849-92093c8c7455",
					"headers": "",
					"url": "http://www.google.com",
					"preRequestScript": "",
					"pathVariables": {},
					"method": "GET",
					"data": [],
					"dataMode": "params",
					"version": 2,
					"tests": "tests['valid integer'] = 2 === 2;\ntests['valid boolean'] = true === false;\ntests['valid name'] = 'shawn' === 'shawn';",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1431116391310,
					"name": "Here it is Story:54873 that we care about",
					"description": "",
					"collectionId": "956d4535-63e2-ca26-5bce-fe21516f9d9c",
					"responses": [],
					"owner": 0
				}
			]
		}
	],
	"environments": [
		{
			"id": "05f456f1-4331-5cf9-1b7a-44003f8f7c27",
			"name": "Test Sad",
			"values": [
				{
					"key": "apiKey",
					"value": "32527e4a-e5ac-46f5-9bad-2c9b7d607bd7",
					"type": "text",
					"name": "apiKey",
					"enabled": true
				},
				{
					"key": "requestHeaderValue",
					"value": "application/json",
					"type": "text",
					"name": "requestHeaderValue",
					"enabled": true
				},
				{
					"key": "digestDescription",
					"value": "description: null",
					"type": "text",
					"name": "digestDescription",
					"enabled": true
				}
			],
			"timestamp": 1432223447020
		},
		{
			"id": "450be40c-5826-8311-0f8e-a71300714485",
			"name": "Test Bad instance",
			"values": [
				{
					"key": "instanceId",
					"value": "",
					"type": "text",
					"name": "instanceId",
					"enabled": true
				}
			],
			"timestamp": 1432223447024
		},
		{
			"id": "80aef751-8e34-9662-913b-b2b989726c27",
			"name": "Test Happy",
			"values": [
				{
					"key": "apiKey",
					"value": "32527e4a-e5ac-46f5-9bad-2c9b7d607bd7",
					"type": "text",
					"name": "apiKey",
					"enabled": true
				},
				{
					"key": "requestHeaderValue",
					"value": "application/json",
					"type": "text",
					"name": "requestHeaderValue",
					"enabled": true
				},
				{
					"key": "digestDescription",
					"value": "",
					"type": "text",
					"name": "digestDescription",
					"enabled": true
				}
			],
			"timestamp": 1432223447027
		},
		{
			"id": "8ea2cd2a-cb49-87cf-2cdf-672f3c8adbaf",
			"name": "Sad Header",
			"values": [
				{
					"key": "requestHeaderValue",
					"value": "application/javascript",
					"type": "text",
					"name": "requestHeaderValue",
					"enabled": true
				}
			],
			"timestamp": 1432223447031
		},
		{
			"id": "e8ed1c10-aef5-32fe-8d46-e61b6877ac70",
			"name": "Test Bad Digest",
			"values": [
				{
					"key": "requestHeaderValue",
					"value": "application/json",
					"type": "text",
					"name": "requestHeaderValue",
					"enabled": true
				},
				{
					"key": "reqHeaderContentType",
					"value": "Content-Type",
					"type": "text",
					"name": "reqHeaderContentType",
					"enabled": true
				},
				{
					"key": "digestDescription",
					"value": "\"description\": null",
					"type": "text",
					"name": "digestDescription",
					"enabled": true
				},
				{
					"key": "apiKey",
					"value": "32527e4a-e5ac-46f5-9bad-2c9b7d607bd7",
					"type": "text",
					"name": "apiKey",
					"enabled": true
				}
			],
			"timestamp": 1432223447033
		}
	],
	"headerPresets": [],
	"globals": [
		{
			"key": "digestId",
			"value": "ae9ce2be-bd9e-4cd0-8fb9-251256fe9dc4",
			"type": "text",
			"name": "digestId",
			"enabled": true
		},
		{
			"key": "rootURL",
			"value": "http://localhost:6565/api",
			"type": "text",
			"name": "rootURL",
			"enabled": true
		},
		{
			"key": "apiKey",
			"value": "2316690a-db62-4b10-84ba-6874ff701536",
			"type": "text",
			"name": "apiKey",
			"enabled": true
		},
		{
			"key": "digestDescription",
			"value": "rainbows are awesome",
			"type": "text",
			"name": "digestDescription",
			"enabled": true
		},
		{
			"key": "responseHeaderContentType",
			"value": "application/hal+json",
			"type": "text",
			"name": "responseHeaderContentType",
			"enabled": true
		},
		{
			"key": "inboxId",
			"value": "ec32df81-d6bc-431d-9d4c-884a333a7671",
			"type": "text",
			"name": "inboxId",
			"enabled": true
		},
		{
			"key": "inboxFamily",
			"value": "GitHub",
			"type": "text",
			"name": "inboxFamily",
			"enabled": true
		},
		{
			"key": "inboxName",
			"value": "somename",
			"type": "text",
			"name": "inboxName",
			"enabled": true
		},
		{
			"key": "inboxURL",
			"value": "http://noted.com",
			"type": "text",
			"name": "inboxURL",
			"enabled": true
		},
		{
			"key": "requestHeaderValue",
			"value": "application/json",
			"type": "text",
			"name": "requestHeaderValue",
			"enabled": true
		},
		{
			"key": "reqHeaderContentType",
			"value": "Content-Type",
			"type": "text",
			"name": "reqHeaderContentType",
			"enabled": true
		},
		{
			"key": "instanceId",
			"value": "19b8830f-658b-4500-9496-753bec7c640d",
			"type": "text",
			"name": "instanceId",
			"enabled": true
		},
		{
			"key": "digestCount",
			"value": "2",
			"type": "text",
			"name": "digestCount",
			"enabled": true
		},
		{
			"key": "streamDigestId1",
			"value": "45c2975f-7d06-4510-9a9c-3419da6bc984",
			"type": "text",
			"name": "streamDigestId1",
			"enabled": true
		},
		{
			"key": "streamDigestId2",
			"value": "575580fb-7227-43db-9933-47bff24a2b16",
			"type": "text",
			"name": "streamDigestId2",
			"enabled": true
		},
		{
			"key": "streamDigestDescrip1",
			"value": "more awesomer digest!",
			"type": "text",
			"name": "streamDigestDescrip1",
			"enabled": true
		},
		{
			"key": "streamDigestDescrip2",
			"value": "rainbows are awesome",
			"type": "text",
			"name": "streamDigestDescrip2",
			"enabled": true
		},
		{
			"key": "requestHeaderContentType",
			"value": "null",
			"type": "text",
			"name": "requestHeaderContentType",
			"enabled": true
		},
		{
			"key": "streamInboxId1",
			"value": "null",
			"type": "text",
			"name": "streamInboxId1",
			"enabled": true
		},
		{
			"key": "streamInboxId2",
			"value": "null",
			"type": "text",
			"name": "streamInboxId2",
			"enabled": true
		},
		{
			"key": "streamInboxFamily1",
			"value": "null",
			"type": "text",
			"name": "streamInboxFamily1",
			"enabled": true
		},
		{
			"key": "streamInboxFamily2",
			"value": "null",
			"type": "text",
			"name": "streamInboxFamily2",
			"enabled": true
		},
		{
			"key": "streamInboxName1",
			"value": "null",
			"type": "text",
			"name": "streamInboxName1",
			"enabled": true
		},
		{
			"key": "streamInboxName2",
			"value": "null",
			"type": "text",
			"name": "streamInboxName2",
			"enabled": true
		},
		{
			"key": "streamInboxURL2",
			"value": "null",
			"type": "text",
			"name": "streamInboxURL2",
			"enabled": true
		},
		{
			"key": "inboxCount",
			"value": "0",
			"type": "text",
			"name": "inboxCount",
			"enabled": true
		},
		{
			"key": "streamInboxURL1",
			"value": "null",
			"type": "text",
			"name": "streamInboxURL1",
			"enabled": true
		},
		{
			"key": "statusCode",
			"type": "text",
			"value": "200"
		},
		{
			"key": "errorTypes",
			"type": "text",
			"value": "r_name"
		},
		{
			"key": "workitem",
			"type": "text",
			"value": "S-11111"
		},
		{
			"key": "digest-query",
			"type": "text",
			"value": "http://localhost:6565/api/68b5a459-a027-48a7-b939-e99f52c08a19/digests/6fcecb2f-e493-4810-8e00-0fcc60200b53/commits"
		},
		{
			"key": "instance-query",
			"type": "text",
			"value": "http://localhost:6565/api/68b5a459-a027-48a7-b939-e99f52c08a19/commits/tags/versionone/workitems/:workitems"
		},
		{
			"key": "instanceQueryWithWorkteItemUrl",
			"type": "text",
			"value": "undefined"
		},
		{
			"key": "commitHeaderType",
			"type": "text",
			"value": "x-github-event"
		},
		{
			"key": "commitHeaderValue",
			"type": "text",
			"value": "push"
		},
		{
			"key": "workItem",
			"type": "text",
			"value": "S-11111"
		}
	]
}